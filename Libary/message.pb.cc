// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Durchschnittsgeschwindigkeit_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fuellstand_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuellstandToHeadquarter_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuellstandToServer_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kilometerstand_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KilometerstandToHeadquarter_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KilometerstandToServer_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Verkehrssituation_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerkehrssituationToHeadquarter_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerkehrssituationToServer_message_2eproto;
class DurchschnittsgeschwindigkeitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Durchschnittsgeschwindigkeit> _instance;
} _Durchschnittsgeschwindigkeit_default_instance_;
class DurchschnittsgeschwindigkeitToHeadquarterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DurchschnittsgeschwindigkeitToHeadquarter> _instance;
} _DurchschnittsgeschwindigkeitToHeadquarter_default_instance_;
class DurchschnittsgeschwindigkeitToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DurchschnittsgeschwindigkeitToServer> _instance;
} _DurchschnittsgeschwindigkeitToServer_default_instance_;
class DurchschnittsgeschwindigkeitFromServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DurchschnittsgeschwindigkeitFromServer> _instance;
} _DurchschnittsgeschwindigkeitFromServer_default_instance_;
class FuellstandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fuellstand> _instance;
} _Fuellstand_default_instance_;
class FuellstandToHeadquarterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuellstandToHeadquarter> _instance;
} _FuellstandToHeadquarter_default_instance_;
class FuellstandToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuellstandToServer> _instance;
} _FuellstandToServer_default_instance_;
class FuellstandFromServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuellstandFromServer> _instance;
} _FuellstandFromServer_default_instance_;
class KilometerstandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Kilometerstand> _instance;
} _Kilometerstand_default_instance_;
class KilometerstandToHeadquarterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KilometerstandToHeadquarter> _instance;
} _KilometerstandToHeadquarter_default_instance_;
class KilometerstandToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KilometerstandToServer> _instance;
} _KilometerstandToServer_default_instance_;
class KilometerstandFromServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KilometerstandFromServer> _instance;
} _KilometerstandFromServer_default_instance_;
class VerkehrssituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Verkehrssituation> _instance;
} _Verkehrssituation_default_instance_;
class VerkehrssituationToHeadquarterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerkehrssituationToHeadquarter> _instance;
} _VerkehrssituationToHeadquarter_default_instance_;
class VerkehrssituationToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerkehrssituationToServer> _instance;
} _VerkehrssituationToServer_default_instance_;
class VerkehrssituationFromServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerkehrssituationFromServer> _instance;
} _VerkehrssituationFromServer_default_instance_;
static void InitDefaultsscc_info_Durchschnittsgeschwindigkeit_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Durchschnittsgeschwindigkeit_default_instance_;
    new (ptr) ::Durchschnittsgeschwindigkeit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Durchschnittsgeschwindigkeit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Durchschnittsgeschwindigkeit_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Durchschnittsgeschwindigkeit_message_2eproto}, {}};

static void InitDefaultsscc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DurchschnittsgeschwindigkeitFromServer_default_instance_;
    new (ptr) ::DurchschnittsgeschwindigkeitFromServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DurchschnittsgeschwindigkeitFromServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto}, {
      &scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto.base,}};

static void InitDefaultsscc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DurchschnittsgeschwindigkeitToHeadquarter_default_instance_;
    new (ptr) ::DurchschnittsgeschwindigkeitToHeadquarter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DurchschnittsgeschwindigkeitToHeadquarter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto}, {
      &scc_info_Durchschnittsgeschwindigkeit_message_2eproto.base,}};

static void InitDefaultsscc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DurchschnittsgeschwindigkeitToServer_default_instance_;
    new (ptr) ::DurchschnittsgeschwindigkeitToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DurchschnittsgeschwindigkeitToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto}, {
      &scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto.base,}};

static void InitDefaultsscc_info_Fuellstand_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Fuellstand_default_instance_;
    new (ptr) ::Fuellstand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Fuellstand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fuellstand_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fuellstand_message_2eproto}, {}};

static void InitDefaultsscc_info_FuellstandFromServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FuellstandFromServer_default_instance_;
    new (ptr) ::FuellstandFromServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FuellstandFromServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuellstandFromServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FuellstandFromServer_message_2eproto}, {
      &scc_info_FuellstandToServer_message_2eproto.base,}};

static void InitDefaultsscc_info_FuellstandToHeadquarter_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FuellstandToHeadquarter_default_instance_;
    new (ptr) ::FuellstandToHeadquarter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FuellstandToHeadquarter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuellstandToHeadquarter_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FuellstandToHeadquarter_message_2eproto}, {
      &scc_info_Fuellstand_message_2eproto.base,}};

static void InitDefaultsscc_info_FuellstandToServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FuellstandToServer_default_instance_;
    new (ptr) ::FuellstandToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FuellstandToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuellstandToServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FuellstandToServer_message_2eproto}, {
      &scc_info_FuellstandToHeadquarter_message_2eproto.base,}};

static void InitDefaultsscc_info_Kilometerstand_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Kilometerstand_default_instance_;
    new (ptr) ::Kilometerstand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kilometerstand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Kilometerstand_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Kilometerstand_message_2eproto}, {}};

static void InitDefaultsscc_info_KilometerstandFromServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KilometerstandFromServer_default_instance_;
    new (ptr) ::KilometerstandFromServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KilometerstandFromServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KilometerstandFromServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KilometerstandFromServer_message_2eproto}, {
      &scc_info_KilometerstandToServer_message_2eproto.base,}};

static void InitDefaultsscc_info_KilometerstandToHeadquarter_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KilometerstandToHeadquarter_default_instance_;
    new (ptr) ::KilometerstandToHeadquarter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KilometerstandToHeadquarter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KilometerstandToHeadquarter_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KilometerstandToHeadquarter_message_2eproto}, {
      &scc_info_Kilometerstand_message_2eproto.base,}};

static void InitDefaultsscc_info_KilometerstandToServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KilometerstandToServer_default_instance_;
    new (ptr) ::KilometerstandToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KilometerstandToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KilometerstandToServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KilometerstandToServer_message_2eproto}, {
      &scc_info_KilometerstandToHeadquarter_message_2eproto.base,}};

static void InitDefaultsscc_info_Verkehrssituation_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Verkehrssituation_default_instance_;
    new (ptr) ::Verkehrssituation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Verkehrssituation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Verkehrssituation_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Verkehrssituation_message_2eproto}, {}};

static void InitDefaultsscc_info_VerkehrssituationFromServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerkehrssituationFromServer_default_instance_;
    new (ptr) ::VerkehrssituationFromServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerkehrssituationFromServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerkehrssituationFromServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerkehrssituationFromServer_message_2eproto}, {
      &scc_info_VerkehrssituationToServer_message_2eproto.base,}};

static void InitDefaultsscc_info_VerkehrssituationToHeadquarter_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerkehrssituationToHeadquarter_default_instance_;
    new (ptr) ::VerkehrssituationToHeadquarter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerkehrssituationToHeadquarter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerkehrssituationToHeadquarter_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerkehrssituationToHeadquarter_message_2eproto}, {
      &scc_info_Verkehrssituation_message_2eproto.base,}};

static void InitDefaultsscc_info_VerkehrssituationToServer_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerkehrssituationToServer_default_instance_;
    new (ptr) ::VerkehrssituationToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerkehrssituationToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerkehrssituationToServer_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerkehrssituationToServer_message_2eproto}, {
      &scc_info_VerkehrssituationToHeadquarter_message_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, accelerate_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, acceleration_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, average_speed_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, breaking_force_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, distance_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, min_speed_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, max_speed_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, speed_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, start_time_),
  PROTOBUF_FIELD_OFFSET(::Durchschnittsgeschwindigkeit, type_),
  9,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, data_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, from_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, from_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, to_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, to_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, send_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, received_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, latency_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToHeadquarter, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, data_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, send_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, received_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, latency_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitToServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, data_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, send_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, received_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, latency_),
  PROTOBUF_FIELD_OFFSET(::DurchschnittsgeschwindigkeitFromServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Fuellstand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Fuellstand, capacity_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, consumption_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, current_capacity_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, last_refueld_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, level_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, ussage_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, will_refill_),
  PROTOBUF_FIELD_OFFSET(::Fuellstand, type_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, data_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, from_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, from_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, to_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, to_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, send_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, received_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, latency_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToHeadquarter, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, data_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, send_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, received_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, latency_),
  PROTOBUF_FIELD_OFFSET(::FuellstandToServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, data_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, send_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, received_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, latency_),
  PROTOBUF_FIELD_OFFSET(::FuellstandFromServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Kilometerstand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Kilometerstand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kilometerstand, mileage_),
  PROTOBUF_FIELD_OFFSET(::Kilometerstand, type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, data_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, from_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, from_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, to_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, to_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, send_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, received_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, latency_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToHeadquarter, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, data_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, send_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, received_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, latency_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandToServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, data_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, send_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, received_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, latency_),
  PROTOBUF_FIELD_OFFSET(::KilometerstandFromServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, numeric_value_),
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, rising_),
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, value_),
  PROTOBUF_FIELD_OFFSET(::Verkehrssituation, type_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, data_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, from_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, from_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, to_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, to_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, send_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, received_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, latency_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToHeadquarter, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, data_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, send_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, received_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, latency_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationToServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, data_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, from_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, from_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, to_address_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, to_port_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, send_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, received_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, latency_),
  PROTOBUF_FIELD_OFFSET(::VerkehrssituationFromServer, round_trip_),
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::Durchschnittsgeschwindigkeit)},
  { 25, 39, sizeof(::DurchschnittsgeschwindigkeitToHeadquarter)},
  { 48, 62, sizeof(::DurchschnittsgeschwindigkeitToServer)},
  { 71, 85, sizeof(::DurchschnittsgeschwindigkeitFromServer)},
  { 94, 107, sizeof(::Fuellstand)},
  { 115, 129, sizeof(::FuellstandToHeadquarter)},
  { 138, 152, sizeof(::FuellstandToServer)},
  { 161, 175, sizeof(::FuellstandFromServer)},
  { 184, 191, sizeof(::Kilometerstand)},
  { 193, 207, sizeof(::KilometerstandToHeadquarter)},
  { 216, 230, sizeof(::KilometerstandToServer)},
  { 239, 253, sizeof(::KilometerstandFromServer)},
  { 262, 271, sizeof(::Verkehrssituation)},
  { 275, 289, sizeof(::VerkehrssituationToHeadquarter)},
  { 298, 312, sizeof(::VerkehrssituationToServer)},
  { 321, 335, sizeof(::VerkehrssituationFromServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Durchschnittsgeschwindigkeit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DurchschnittsgeschwindigkeitToHeadquarter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DurchschnittsgeschwindigkeitToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DurchschnittsgeschwindigkeitFromServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Fuellstand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FuellstandToHeadquarter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FuellstandToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FuellstandFromServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Kilometerstand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KilometerstandToHeadquarter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KilometerstandToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KilometerstandFromServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Verkehrssituation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerkehrssituationToHeadquarter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerkehrssituationToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerkehrssituationFromServer_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\"\340\001\n\034Durchschnittsgeschwi"
  "ndigkeit\022\022\n\naccelerate\030\001 \002(\010\022\024\n\014accelera"
  "tion\030\002 \002(\001\022\025\n\raverage_speed\030\003 \002(\001\022\026\n\016bre"
  "aking_force\030\004 \002(\001\022\020\n\010distance\030\005 \002(\001\022\021\n\tm"
  "in_speed\030\006 \002(\001\022\021\n\tmax_speed\030\007 \002(\001\022\r\n\005spe"
  "ed\030\010 \002(\001\022\022\n\nstart_time\030\t \002(\001\022\014\n\004type\030\n \002"
  "(\t\"\353\001\n)DurchschnittsgeschwindigkeitToHea"
  "dquarter\022+\n\004data\030\001 \002(\0132\035.Durchschnittsge"
  "schwindigkeit\022\024\n\014from_address\030\002 \001(\t\022\021\n\tf"
  "rom_port\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to"
  "_port\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 "
  "\001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004"
  "\"\363\001\n$DurchschnittsgeschwindigkeitToServe"
  "r\0228\n\004data\030\001 \002(\0132*.Durchschnittsgeschwind"
  "igkeitToHeadquarter\022\024\n\014from_address\030\002 \001("
  "\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t"
  "\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010recei"
  "ved\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nround_trip"
  "\030\t \001(\004\"\360\001\n&DurchschnittsgeschwindigkeitF"
  "romServer\0223\n\004data\030\001 \002(\0132%.Durchschnittsg"
  "eschwindigkeitToServer\022\024\n\014from_address\030\002"
  " \001(\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_address\030\004 "
  "\001(\t\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010re"
  "ceived\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nround_t"
  "rip\030\t \001(\004\"\245\001\n\nFuellstand\022\020\n\010capacity\030\001 \002"
  "(\001\022\023\n\013consumption\030\002 \002(\001\022\030\n\020current_capac"
  "ity\030\003 \002(\001\022\024\n\014last_refueld\030\004 \002(\001\022\r\n\005level"
  "\030\005 \002(\001\022\016\n\006ussage\030\006 \002(\001\022\023\n\013will_refill\030\007 "
  "\002(\001\022\014\n\004type\030\010 \002(\t\"\307\001\n\027FuellstandToHeadqu"
  "arter\022\031\n\004data\030\001 \002(\0132\013.Fuellstand\022\024\n\014from"
  "_address\030\002 \001(\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_"
  "address\030\004 \001(\t\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006"
  " \002(\004\022\020\n\010received\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022"
  "\022\n\nround_trip\030\t \001(\004\"\317\001\n\022FuellstandToServ"
  "er\022&\n\004data\030\001 \002(\0132\030.FuellstandToHeadquart"
  "er\022\024\n\014from_address\030\002 \001(\t\022\021\n\tfrom_port\030\003 "
  "\001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to_port\030\005 \001(\005"
  "\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 \001(\004\022\017\n\007late"
  "ncy\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004\"\314\001\n\024Fuells"
  "tandFromServer\022!\n\004data\030\001 \002(\0132\023.Fuellstan"
  "dToServer\022\024\n\014from_address\030\002 \001(\t\022\021\n\tfrom_"
  "port\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to_por"
  "t\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 \001(\004\022"
  "\017\n\007latency\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004\"/\n\016"
  "Kilometerstand\022\017\n\007mileage\030\001 \002(\001\022\014\n\004type\030"
  "\002 \002(\t\"\317\001\n\033KilometerstandToHeadquarter\022\035\n"
  "\004data\030\001 \002(\0132\017.Kilometerstand\022\024\n\014from_add"
  "ress\030\002 \001(\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_addr"
  "ess\030\004 \001(\t\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006 \002(\004"
  "\022\020\n\010received\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nr"
  "ound_trip\030\t \001(\004\"\327\001\n\026KilometerstandToServ"
  "er\022*\n\004data\030\001 \002(\0132\034.KilometerstandToHeadq"
  "uarter\022\024\n\014from_address\030\002 \001(\t\022\021\n\tfrom_por"
  "t\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to_port\030\005"
  " \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 \001(\004\022\017\n\007"
  "latency\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004\"\324\001\n\030Ki"
  "lometerstandFromServer\022%\n\004data\030\001 \002(\0132\027.K"
  "ilometerstandToServer\022\024\n\014from_address\030\002 "
  "\001(\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_address\030\004 \001"
  "(\t\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010rec"
  "eived\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nround_tr"
  "ip\030\t \001(\004\"W\n\021Verkehrssituation\022\025\n\rnumeric"
  "_value\030\001 \002(\001\022\016\n\006rising\030\002 \002(\010\022\r\n\005value\030\003 "
  "\002(\t\022\014\n\004type\030\004 \002(\t\"\325\001\n\036VerkehrssituationT"
  "oHeadquarter\022 \n\004data\030\001 \002(\0132\022.Verkehrssit"
  "uation\022\024\n\014from_address\030\002 \001(\t\022\021\n\tfrom_por"
  "t\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to_port\030\005"
  " \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 \001(\004\022\017\n\007"
  "latency\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004\"\335\001\n\031Ve"
  "rkehrssituationToServer\022-\n\004data\030\001 \002(\0132\037."
  "VerkehrssituationToHeadquarter\022\024\n\014from_a"
  "ddress\030\002 \001(\t\022\021\n\tfrom_port\030\003 \001(\005\022\022\n\nto_ad"
  "dress\030\004 \001(\t\022\017\n\007to_port\030\005 \001(\005\022\014\n\004send\030\006 \002"
  "(\004\022\020\n\010received\030\007 \001(\004\022\017\n\007latency\030\010 \001(\004\022\022\n"
  "\nround_trip\030\t \001(\004\"\332\001\n\033VerkehrssituationF"
  "romServer\022(\n\004data\030\001 \002(\0132\032.Verkehrssituat"
  "ionToServer\022\024\n\014from_address\030\002 \001(\t\022\021\n\tfro"
  "m_port\030\003 \001(\005\022\022\n\nto_address\030\004 \001(\t\022\017\n\007to_p"
  "ort\030\005 \001(\005\022\014\n\004send\030\006 \002(\004\022\020\n\010received\030\007 \001("
  "\004\022\017\n\007latency\030\010 \001(\004\022\022\n\nround_trip\030\t \001(\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[16] = {
  &scc_info_Durchschnittsgeschwindigkeit_message_2eproto.base,
  &scc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto.base,
  &scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto.base,
  &scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto.base,
  &scc_info_Fuellstand_message_2eproto.base,
  &scc_info_FuellstandFromServer_message_2eproto.base,
  &scc_info_FuellstandToHeadquarter_message_2eproto.base,
  &scc_info_FuellstandToServer_message_2eproto.base,
  &scc_info_Kilometerstand_message_2eproto.base,
  &scc_info_KilometerstandFromServer_message_2eproto.base,
  &scc_info_KilometerstandToHeadquarter_message_2eproto.base,
  &scc_info_KilometerstandToServer_message_2eproto.base,
  &scc_info_Verkehrssituation_message_2eproto.base,
  &scc_info_VerkehrssituationFromServer_message_2eproto.base,
  &scc_info_VerkehrssituationToHeadquarter_message_2eproto.base,
  &scc_info_VerkehrssituationToServer_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 3198,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 16, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);

// ===================================================================

void Durchschnittsgeschwindigkeit::InitAsDefaultInstance() {
}
class Durchschnittsgeschwindigkeit::_Internal {
 public:
  using HasBits = decltype(std::declval<Durchschnittsgeschwindigkeit>()._has_bits_);
  static void set_has_accelerate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_average_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_breaking_force(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

Durchschnittsgeschwindigkeit::Durchschnittsgeschwindigkeit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Durchschnittsgeschwindigkeit)
}
Durchschnittsgeschwindigkeit::Durchschnittsgeschwindigkeit(const Durchschnittsgeschwindigkeit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&acceleration_, &from.acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&accelerate_) -
    reinterpret_cast<char*>(&acceleration_)) + sizeof(accelerate_));
  // @@protoc_insertion_point(copy_constructor:Durchschnittsgeschwindigkeit)
}

void Durchschnittsgeschwindigkeit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Durchschnittsgeschwindigkeit_message_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accelerate_) -
      reinterpret_cast<char*>(&acceleration_)) + sizeof(accelerate_));
}

Durchschnittsgeschwindigkeit::~Durchschnittsgeschwindigkeit() {
  // @@protoc_insertion_point(destructor:Durchschnittsgeschwindigkeit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Durchschnittsgeschwindigkeit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Durchschnittsgeschwindigkeit::ArenaDtor(void* object) {
  Durchschnittsgeschwindigkeit* _this = reinterpret_cast< Durchschnittsgeschwindigkeit* >(object);
  (void)_this;
}
void Durchschnittsgeschwindigkeit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Durchschnittsgeschwindigkeit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Durchschnittsgeschwindigkeit& Durchschnittsgeschwindigkeit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Durchschnittsgeschwindigkeit_message_2eproto.base);
  return *internal_default_instance();
}


void Durchschnittsgeschwindigkeit::Clear() {
// @@protoc_insertion_point(message_clear_start:Durchschnittsgeschwindigkeit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&acceleration_)) + sizeof(speed_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accelerate_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(accelerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Durchschnittsgeschwindigkeit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool accelerate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accelerate(&has_bits);
          accelerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double average_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_average_speed(&has_bits);
          average_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double breaking_force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_breaking_force(&has_bits);
          breaking_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double min_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_min_speed(&has_bits);
          min_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Durchschnittsgeschwindigkeit.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Durchschnittsgeschwindigkeit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Durchschnittsgeschwindigkeit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool accelerate = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accelerate(), target);
  }

  // required double acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_acceleration(), target);
  }

  // required double average_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_average_speed(), target);
  }

  // required double breaking_force = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_breaking_force(), target);
  }

  // required double distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  // required double min_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_speed(), target);
  }

  // required double max_speed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_speed(), target);
  }

  // required double speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_speed(), target);
  }

  // required double start_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_start_time(), target);
  }

  // required string type = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Durchschnittsgeschwindigkeit.type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Durchschnittsgeschwindigkeit)
  return target;
}

size_t Durchschnittsgeschwindigkeit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Durchschnittsgeschwindigkeit)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_acceleration()) {
    // required double acceleration = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_average_speed()) {
    // required double average_speed = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_breaking_force()) {
    // required double breaking_force = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_distance()) {
    // required double distance = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_min_speed()) {
    // required double min_speed = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_max_speed()) {
    // required double max_speed = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_speed()) {
    // required double speed = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_start_time()) {
    // required double start_time = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_accelerate()) {
    // required bool accelerate = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Durchschnittsgeschwindigkeit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Durchschnittsgeschwindigkeit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required double acceleration = 2;
    total_size += 1 + 8;

    // required double average_speed = 3;
    total_size += 1 + 8;

    // required double breaking_force = 4;
    total_size += 1 + 8;

    // required double distance = 5;
    total_size += 1 + 8;

    // required double min_speed = 6;
    total_size += 1 + 8;

    // required double max_speed = 7;
    total_size += 1 + 8;

    // required double speed = 8;
    total_size += 1 + 8;

    // required double start_time = 9;
    total_size += 1 + 8;

    // required bool accelerate = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Durchschnittsgeschwindigkeit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Durchschnittsgeschwindigkeit)
  GOOGLE_DCHECK_NE(&from, this);
  const Durchschnittsgeschwindigkeit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Durchschnittsgeschwindigkeit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Durchschnittsgeschwindigkeit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Durchschnittsgeschwindigkeit)
    MergeFrom(*source);
  }
}

void Durchschnittsgeschwindigkeit::MergeFrom(const Durchschnittsgeschwindigkeit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Durchschnittsgeschwindigkeit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      average_speed_ = from.average_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      breaking_force_ = from.breaking_force_;
    }
    if (cached_has_bits & 0x00000010u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_speed_ = from.min_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      accelerate_ = from.accelerate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Durchschnittsgeschwindigkeit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Durchschnittsgeschwindigkeit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Durchschnittsgeschwindigkeit::CopyFrom(const Durchschnittsgeschwindigkeit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Durchschnittsgeschwindigkeit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Durchschnittsgeschwindigkeit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Durchschnittsgeschwindigkeit::InternalSwap(Durchschnittsgeschwindigkeit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Durchschnittsgeschwindigkeit, accelerate_)
      + sizeof(Durchschnittsgeschwindigkeit::accelerate_)
      - PROTOBUF_FIELD_OFFSET(Durchschnittsgeschwindigkeit, acceleration_)>(
          reinterpret_cast<char*>(&acceleration_),
          reinterpret_cast<char*>(&other->acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Durchschnittsgeschwindigkeit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DurchschnittsgeschwindigkeitToHeadquarter::InitAsDefaultInstance() {
  ::_DurchschnittsgeschwindigkeitToHeadquarter_default_instance_._instance.get_mutable()->data_ = const_cast< ::Durchschnittsgeschwindigkeit*>(
      ::Durchschnittsgeschwindigkeit::internal_default_instance());
}
class DurchschnittsgeschwindigkeitToHeadquarter::_Internal {
 public:
  using HasBits = decltype(std::declval<DurchschnittsgeschwindigkeitToHeadquarter>()._has_bits_);
  static const ::Durchschnittsgeschwindigkeit& data(const DurchschnittsgeschwindigkeitToHeadquarter* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::Durchschnittsgeschwindigkeit&
DurchschnittsgeschwindigkeitToHeadquarter::_Internal::data(const DurchschnittsgeschwindigkeitToHeadquarter* msg) {
  return *msg->data_;
}
DurchschnittsgeschwindigkeitToHeadquarter::DurchschnittsgeschwindigkeitToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DurchschnittsgeschwindigkeitToHeadquarter)
}
DurchschnittsgeschwindigkeitToHeadquarter::DurchschnittsgeschwindigkeitToHeadquarter(const DurchschnittsgeschwindigkeitToHeadquarter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::Durchschnittsgeschwindigkeit(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:DurchschnittsgeschwindigkeitToHeadquarter)
}

void DurchschnittsgeschwindigkeitToHeadquarter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

DurchschnittsgeschwindigkeitToHeadquarter::~DurchschnittsgeschwindigkeitToHeadquarter() {
  // @@protoc_insertion_point(destructor:DurchschnittsgeschwindigkeitToHeadquarter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DurchschnittsgeschwindigkeitToHeadquarter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DurchschnittsgeschwindigkeitToHeadquarter::ArenaDtor(void* object) {
  DurchschnittsgeschwindigkeitToHeadquarter* _this = reinterpret_cast< DurchschnittsgeschwindigkeitToHeadquarter* >(object);
  (void)_this;
}
void DurchschnittsgeschwindigkeitToHeadquarter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DurchschnittsgeschwindigkeitToHeadquarter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DurchschnittsgeschwindigkeitToHeadquarter& DurchschnittsgeschwindigkeitToHeadquarter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DurchschnittsgeschwindigkeitToHeadquarter_message_2eproto.base);
  return *internal_default_instance();
}


void DurchschnittsgeschwindigkeitToHeadquarter::Clear() {
// @@protoc_insertion_point(message_clear_start:DurchschnittsgeschwindigkeitToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurchschnittsgeschwindigkeitToHeadquarter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Durchschnittsgeschwindigkeit data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitToHeadquarter.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitToHeadquarter.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DurchschnittsgeschwindigkeitToHeadquarter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DurchschnittsgeschwindigkeitToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Durchschnittsgeschwindigkeit data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitToHeadquarter.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitToHeadquarter.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DurchschnittsgeschwindigkeitToHeadquarter)
  return target;
}

size_t DurchschnittsgeschwindigkeitToHeadquarter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DurchschnittsgeschwindigkeitToHeadquarter)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .Durchschnittsgeschwindigkeit data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t DurchschnittsgeschwindigkeitToHeadquarter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DurchschnittsgeschwindigkeitToHeadquarter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .Durchschnittsgeschwindigkeit data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DurchschnittsgeschwindigkeitToHeadquarter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DurchschnittsgeschwindigkeitToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  const DurchschnittsgeschwindigkeitToHeadquarter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DurchschnittsgeschwindigkeitToHeadquarter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DurchschnittsgeschwindigkeitToHeadquarter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DurchschnittsgeschwindigkeitToHeadquarter)
    MergeFrom(*source);
  }
}

void DurchschnittsgeschwindigkeitToHeadquarter::MergeFrom(const DurchschnittsgeschwindigkeitToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DurchschnittsgeschwindigkeitToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::Durchschnittsgeschwindigkeit::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void DurchschnittsgeschwindigkeitToHeadquarter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DurchschnittsgeschwindigkeitToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurchschnittsgeschwindigkeitToHeadquarter::CopyFrom(const DurchschnittsgeschwindigkeitToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DurchschnittsgeschwindigkeitToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurchschnittsgeschwindigkeitToHeadquarter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void DurchschnittsgeschwindigkeitToHeadquarter::InternalSwap(DurchschnittsgeschwindigkeitToHeadquarter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitToHeadquarter, round_trip_)
      + sizeof(DurchschnittsgeschwindigkeitToHeadquarter::round_trip_)
      - PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitToHeadquarter, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DurchschnittsgeschwindigkeitToHeadquarter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DurchschnittsgeschwindigkeitToServer::InitAsDefaultInstance() {
  ::_DurchschnittsgeschwindigkeitToServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::DurchschnittsgeschwindigkeitToHeadquarter*>(
      ::DurchschnittsgeschwindigkeitToHeadquarter::internal_default_instance());
}
class DurchschnittsgeschwindigkeitToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<DurchschnittsgeschwindigkeitToServer>()._has_bits_);
  static const ::DurchschnittsgeschwindigkeitToHeadquarter& data(const DurchschnittsgeschwindigkeitToServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::DurchschnittsgeschwindigkeitToHeadquarter&
DurchschnittsgeschwindigkeitToServer::_Internal::data(const DurchschnittsgeschwindigkeitToServer* msg) {
  return *msg->data_;
}
DurchschnittsgeschwindigkeitToServer::DurchschnittsgeschwindigkeitToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DurchschnittsgeschwindigkeitToServer)
}
DurchschnittsgeschwindigkeitToServer::DurchschnittsgeschwindigkeitToServer(const DurchschnittsgeschwindigkeitToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::DurchschnittsgeschwindigkeitToHeadquarter(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:DurchschnittsgeschwindigkeitToServer)
}

void DurchschnittsgeschwindigkeitToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

DurchschnittsgeschwindigkeitToServer::~DurchschnittsgeschwindigkeitToServer() {
  // @@protoc_insertion_point(destructor:DurchschnittsgeschwindigkeitToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DurchschnittsgeschwindigkeitToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DurchschnittsgeschwindigkeitToServer::ArenaDtor(void* object) {
  DurchschnittsgeschwindigkeitToServer* _this = reinterpret_cast< DurchschnittsgeschwindigkeitToServer* >(object);
  (void)_this;
}
void DurchschnittsgeschwindigkeitToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DurchschnittsgeschwindigkeitToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DurchschnittsgeschwindigkeitToServer& DurchschnittsgeschwindigkeitToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DurchschnittsgeschwindigkeitToServer_message_2eproto.base);
  return *internal_default_instance();
}


void DurchschnittsgeschwindigkeitToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:DurchschnittsgeschwindigkeitToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurchschnittsgeschwindigkeitToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitToServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitToServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DurchschnittsgeschwindigkeitToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DurchschnittsgeschwindigkeitToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitToServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitToServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DurchschnittsgeschwindigkeitToServer)
  return target;
}

size_t DurchschnittsgeschwindigkeitToServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DurchschnittsgeschwindigkeitToServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t DurchschnittsgeschwindigkeitToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DurchschnittsgeschwindigkeitToServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DurchschnittsgeschwindigkeitToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DurchschnittsgeschwindigkeitToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const DurchschnittsgeschwindigkeitToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DurchschnittsgeschwindigkeitToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DurchschnittsgeschwindigkeitToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DurchschnittsgeschwindigkeitToServer)
    MergeFrom(*source);
  }
}

void DurchschnittsgeschwindigkeitToServer::MergeFrom(const DurchschnittsgeschwindigkeitToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DurchschnittsgeschwindigkeitToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::DurchschnittsgeschwindigkeitToHeadquarter::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void DurchschnittsgeschwindigkeitToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DurchschnittsgeschwindigkeitToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurchschnittsgeschwindigkeitToServer::CopyFrom(const DurchschnittsgeschwindigkeitToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DurchschnittsgeschwindigkeitToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurchschnittsgeschwindigkeitToServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void DurchschnittsgeschwindigkeitToServer::InternalSwap(DurchschnittsgeschwindigkeitToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitToServer, round_trip_)
      + sizeof(DurchschnittsgeschwindigkeitToServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitToServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DurchschnittsgeschwindigkeitToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DurchschnittsgeschwindigkeitFromServer::InitAsDefaultInstance() {
  ::_DurchschnittsgeschwindigkeitFromServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::DurchschnittsgeschwindigkeitToServer*>(
      ::DurchschnittsgeschwindigkeitToServer::internal_default_instance());
}
class DurchschnittsgeschwindigkeitFromServer::_Internal {
 public:
  using HasBits = decltype(std::declval<DurchschnittsgeschwindigkeitFromServer>()._has_bits_);
  static const ::DurchschnittsgeschwindigkeitToServer& data(const DurchschnittsgeschwindigkeitFromServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::DurchschnittsgeschwindigkeitToServer&
DurchschnittsgeschwindigkeitFromServer::_Internal::data(const DurchschnittsgeschwindigkeitFromServer* msg) {
  return *msg->data_;
}
DurchschnittsgeschwindigkeitFromServer::DurchschnittsgeschwindigkeitFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DurchschnittsgeschwindigkeitFromServer)
}
DurchschnittsgeschwindigkeitFromServer::DurchschnittsgeschwindigkeitFromServer(const DurchschnittsgeschwindigkeitFromServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::DurchschnittsgeschwindigkeitToServer(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:DurchschnittsgeschwindigkeitFromServer)
}

void DurchschnittsgeschwindigkeitFromServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

DurchschnittsgeschwindigkeitFromServer::~DurchschnittsgeschwindigkeitFromServer() {
  // @@protoc_insertion_point(destructor:DurchschnittsgeschwindigkeitFromServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DurchschnittsgeschwindigkeitFromServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DurchschnittsgeschwindigkeitFromServer::ArenaDtor(void* object) {
  DurchschnittsgeschwindigkeitFromServer* _this = reinterpret_cast< DurchschnittsgeschwindigkeitFromServer* >(object);
  (void)_this;
}
void DurchschnittsgeschwindigkeitFromServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DurchschnittsgeschwindigkeitFromServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DurchschnittsgeschwindigkeitFromServer& DurchschnittsgeschwindigkeitFromServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DurchschnittsgeschwindigkeitFromServer_message_2eproto.base);
  return *internal_default_instance();
}


void DurchschnittsgeschwindigkeitFromServer::Clear() {
// @@protoc_insertion_point(message_clear_start:DurchschnittsgeschwindigkeitFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurchschnittsgeschwindigkeitFromServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DurchschnittsgeschwindigkeitToServer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitFromServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DurchschnittsgeschwindigkeitFromServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DurchschnittsgeschwindigkeitFromServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DurchschnittsgeschwindigkeitFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DurchschnittsgeschwindigkeitToServer data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitFromServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DurchschnittsgeschwindigkeitFromServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DurchschnittsgeschwindigkeitFromServer)
  return target;
}

size_t DurchschnittsgeschwindigkeitFromServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DurchschnittsgeschwindigkeitFromServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .DurchschnittsgeschwindigkeitToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t DurchschnittsgeschwindigkeitFromServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DurchschnittsgeschwindigkeitFromServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .DurchschnittsgeschwindigkeitToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DurchschnittsgeschwindigkeitFromServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DurchschnittsgeschwindigkeitFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  const DurchschnittsgeschwindigkeitFromServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DurchschnittsgeschwindigkeitFromServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DurchschnittsgeschwindigkeitFromServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DurchschnittsgeschwindigkeitFromServer)
    MergeFrom(*source);
  }
}

void DurchschnittsgeschwindigkeitFromServer::MergeFrom(const DurchschnittsgeschwindigkeitFromServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DurchschnittsgeschwindigkeitFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::DurchschnittsgeschwindigkeitToServer::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void DurchschnittsgeschwindigkeitFromServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DurchschnittsgeschwindigkeitFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurchschnittsgeschwindigkeitFromServer::CopyFrom(const DurchschnittsgeschwindigkeitFromServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DurchschnittsgeschwindigkeitFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurchschnittsgeschwindigkeitFromServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void DurchschnittsgeschwindigkeitFromServer::InternalSwap(DurchschnittsgeschwindigkeitFromServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitFromServer, round_trip_)
      + sizeof(DurchschnittsgeschwindigkeitFromServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(DurchschnittsgeschwindigkeitFromServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DurchschnittsgeschwindigkeitFromServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fuellstand::InitAsDefaultInstance() {
}
class Fuellstand::_Internal {
 public:
  using HasBits = decltype(std::declval<Fuellstand>()._has_bits_);
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_consumption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_refueld(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ussage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_will_refill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

Fuellstand::Fuellstand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Fuellstand)
}
Fuellstand::Fuellstand(const Fuellstand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&will_refill_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(will_refill_));
  // @@protoc_insertion_point(copy_constructor:Fuellstand)
}

void Fuellstand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fuellstand_message_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&will_refill_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(will_refill_));
}

Fuellstand::~Fuellstand() {
  // @@protoc_insertion_point(destructor:Fuellstand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fuellstand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fuellstand::ArenaDtor(void* object) {
  Fuellstand* _this = reinterpret_cast< Fuellstand* >(object);
  (void)_this;
}
void Fuellstand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fuellstand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fuellstand& Fuellstand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fuellstand_message_2eproto.base);
  return *internal_default_instance();
}


void Fuellstand::Clear() {
// @@protoc_insertion_point(message_clear_start:Fuellstand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&will_refill_) -
        reinterpret_cast<char*>(&capacity_)) + sizeof(will_refill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fuellstand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double consumption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_consumption(&has_bits);
          consumption_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double current_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_current_capacity(&has_bits);
          current_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double last_refueld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_last_refueld(&has_bits);
          last_refueld_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ussage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ussage(&has_bits);
          ussage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double will_refill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_will_refill(&has_bits);
          will_refill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Fuellstand.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fuellstand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Fuellstand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double capacity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_capacity(), target);
  }

  // required double consumption = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_consumption(), target);
  }

  // required double current_capacity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_capacity(), target);
  }

  // required double last_refueld = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_refueld(), target);
  }

  // required double level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_level(), target);
  }

  // required double ussage = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ussage(), target);
  }

  // required double will_refill = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_will_refill(), target);
  }

  // required string type = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Fuellstand.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Fuellstand)
  return target;
}

size_t Fuellstand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Fuellstand)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_capacity()) {
    // required double capacity = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_consumption()) {
    // required double consumption = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_current_capacity()) {
    // required double current_capacity = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_last_refueld()) {
    // required double last_refueld = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_level()) {
    // required double level = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_ussage()) {
    // required double ussage = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_will_refill()) {
    // required double will_refill = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Fuellstand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Fuellstand)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required double capacity = 1;
    total_size += 1 + 8;

    // required double consumption = 2;
    total_size += 1 + 8;

    // required double current_capacity = 3;
    total_size += 1 + 8;

    // required double last_refueld = 4;
    total_size += 1 + 8;

    // required double level = 5;
    total_size += 1 + 8;

    // required double ussage = 6;
    total_size += 1 + 8;

    // required double will_refill = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fuellstand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Fuellstand)
  GOOGLE_DCHECK_NE(&from, this);
  const Fuellstand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fuellstand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Fuellstand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Fuellstand)
    MergeFrom(*source);
  }
}

void Fuellstand::MergeFrom(const Fuellstand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Fuellstand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      consumption_ = from.consumption_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_capacity_ = from.current_capacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_refueld_ = from.last_refueld_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      ussage_ = from.ussage_;
    }
    if (cached_has_bits & 0x00000080u) {
      will_refill_ = from.will_refill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fuellstand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Fuellstand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fuellstand::CopyFrom(const Fuellstand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Fuellstand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fuellstand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Fuellstand::InternalSwap(Fuellstand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fuellstand, will_refill_)
      + sizeof(Fuellstand::will_refill_)
      - PROTOBUF_FIELD_OFFSET(Fuellstand, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fuellstand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FuellstandToHeadquarter::InitAsDefaultInstance() {
  ::_FuellstandToHeadquarter_default_instance_._instance.get_mutable()->data_ = const_cast< ::Fuellstand*>(
      ::Fuellstand::internal_default_instance());
}
class FuellstandToHeadquarter::_Internal {
 public:
  using HasBits = decltype(std::declval<FuellstandToHeadquarter>()._has_bits_);
  static const ::Fuellstand& data(const FuellstandToHeadquarter* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::Fuellstand&
FuellstandToHeadquarter::_Internal::data(const FuellstandToHeadquarter* msg) {
  return *msg->data_;
}
FuellstandToHeadquarter::FuellstandToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FuellstandToHeadquarter)
}
FuellstandToHeadquarter::FuellstandToHeadquarter(const FuellstandToHeadquarter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::Fuellstand(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:FuellstandToHeadquarter)
}

void FuellstandToHeadquarter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FuellstandToHeadquarter_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

FuellstandToHeadquarter::~FuellstandToHeadquarter() {
  // @@protoc_insertion_point(destructor:FuellstandToHeadquarter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuellstandToHeadquarter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void FuellstandToHeadquarter::ArenaDtor(void* object) {
  FuellstandToHeadquarter* _this = reinterpret_cast< FuellstandToHeadquarter* >(object);
  (void)_this;
}
void FuellstandToHeadquarter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuellstandToHeadquarter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuellstandToHeadquarter& FuellstandToHeadquarter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuellstandToHeadquarter_message_2eproto.base);
  return *internal_default_instance();
}


void FuellstandToHeadquarter::Clear() {
// @@protoc_insertion_point(message_clear_start:FuellstandToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuellstandToHeadquarter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Fuellstand data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandToHeadquarter.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandToHeadquarter.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuellstandToHeadquarter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FuellstandToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Fuellstand data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandToHeadquarter.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandToHeadquarter.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FuellstandToHeadquarter)
  return target;
}

size_t FuellstandToHeadquarter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FuellstandToHeadquarter)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .Fuellstand data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t FuellstandToHeadquarter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FuellstandToHeadquarter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .Fuellstand data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuellstandToHeadquarter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FuellstandToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  const FuellstandToHeadquarter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuellstandToHeadquarter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FuellstandToHeadquarter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FuellstandToHeadquarter)
    MergeFrom(*source);
  }
}

void FuellstandToHeadquarter::MergeFrom(const FuellstandToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FuellstandToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::Fuellstand::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void FuellstandToHeadquarter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FuellstandToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuellstandToHeadquarter::CopyFrom(const FuellstandToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FuellstandToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuellstandToHeadquarter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void FuellstandToHeadquarter::InternalSwap(FuellstandToHeadquarter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuellstandToHeadquarter, round_trip_)
      + sizeof(FuellstandToHeadquarter::round_trip_)
      - PROTOBUF_FIELD_OFFSET(FuellstandToHeadquarter, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuellstandToHeadquarter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FuellstandToServer::InitAsDefaultInstance() {
  ::_FuellstandToServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::FuellstandToHeadquarter*>(
      ::FuellstandToHeadquarter::internal_default_instance());
}
class FuellstandToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<FuellstandToServer>()._has_bits_);
  static const ::FuellstandToHeadquarter& data(const FuellstandToServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::FuellstandToHeadquarter&
FuellstandToServer::_Internal::data(const FuellstandToServer* msg) {
  return *msg->data_;
}
FuellstandToServer::FuellstandToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FuellstandToServer)
}
FuellstandToServer::FuellstandToServer(const FuellstandToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::FuellstandToHeadquarter(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:FuellstandToServer)
}

void FuellstandToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FuellstandToServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

FuellstandToServer::~FuellstandToServer() {
  // @@protoc_insertion_point(destructor:FuellstandToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuellstandToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void FuellstandToServer::ArenaDtor(void* object) {
  FuellstandToServer* _this = reinterpret_cast< FuellstandToServer* >(object);
  (void)_this;
}
void FuellstandToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuellstandToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuellstandToServer& FuellstandToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuellstandToServer_message_2eproto.base);
  return *internal_default_instance();
}


void FuellstandToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:FuellstandToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuellstandToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .FuellstandToHeadquarter data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandToServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandToServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuellstandToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FuellstandToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .FuellstandToHeadquarter data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandToServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandToServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FuellstandToServer)
  return target;
}

size_t FuellstandToServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FuellstandToServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .FuellstandToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t FuellstandToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FuellstandToServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .FuellstandToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuellstandToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FuellstandToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const FuellstandToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuellstandToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FuellstandToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FuellstandToServer)
    MergeFrom(*source);
  }
}

void FuellstandToServer::MergeFrom(const FuellstandToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FuellstandToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::FuellstandToHeadquarter::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void FuellstandToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FuellstandToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuellstandToServer::CopyFrom(const FuellstandToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FuellstandToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuellstandToServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void FuellstandToServer::InternalSwap(FuellstandToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuellstandToServer, round_trip_)
      + sizeof(FuellstandToServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(FuellstandToServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuellstandToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FuellstandFromServer::InitAsDefaultInstance() {
  ::_FuellstandFromServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::FuellstandToServer*>(
      ::FuellstandToServer::internal_default_instance());
}
class FuellstandFromServer::_Internal {
 public:
  using HasBits = decltype(std::declval<FuellstandFromServer>()._has_bits_);
  static const ::FuellstandToServer& data(const FuellstandFromServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::FuellstandToServer&
FuellstandFromServer::_Internal::data(const FuellstandFromServer* msg) {
  return *msg->data_;
}
FuellstandFromServer::FuellstandFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FuellstandFromServer)
}
FuellstandFromServer::FuellstandFromServer(const FuellstandFromServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::FuellstandToServer(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:FuellstandFromServer)
}

void FuellstandFromServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FuellstandFromServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

FuellstandFromServer::~FuellstandFromServer() {
  // @@protoc_insertion_point(destructor:FuellstandFromServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuellstandFromServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void FuellstandFromServer::ArenaDtor(void* object) {
  FuellstandFromServer* _this = reinterpret_cast< FuellstandFromServer* >(object);
  (void)_this;
}
void FuellstandFromServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuellstandFromServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuellstandFromServer& FuellstandFromServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuellstandFromServer_message_2eproto.base);
  return *internal_default_instance();
}


void FuellstandFromServer::Clear() {
// @@protoc_insertion_point(message_clear_start:FuellstandFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuellstandFromServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .FuellstandToServer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandFromServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FuellstandFromServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuellstandFromServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FuellstandFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .FuellstandToServer data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandFromServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FuellstandFromServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FuellstandFromServer)
  return target;
}

size_t FuellstandFromServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FuellstandFromServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .FuellstandToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t FuellstandFromServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FuellstandFromServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .FuellstandToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuellstandFromServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FuellstandFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  const FuellstandFromServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuellstandFromServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FuellstandFromServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FuellstandFromServer)
    MergeFrom(*source);
  }
}

void FuellstandFromServer::MergeFrom(const FuellstandFromServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FuellstandFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::FuellstandToServer::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void FuellstandFromServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FuellstandFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuellstandFromServer::CopyFrom(const FuellstandFromServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FuellstandFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuellstandFromServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void FuellstandFromServer::InternalSwap(FuellstandFromServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuellstandFromServer, round_trip_)
      + sizeof(FuellstandFromServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(FuellstandFromServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuellstandFromServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Kilometerstand::InitAsDefaultInstance() {
}
class Kilometerstand::_Internal {
 public:
  using HasBits = decltype(std::declval<Kilometerstand>()._has_bits_);
  static void set_has_mileage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Kilometerstand::Kilometerstand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kilometerstand)
}
Kilometerstand::Kilometerstand(const Kilometerstand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  mileage_ = from.mileage_;
  // @@protoc_insertion_point(copy_constructor:Kilometerstand)
}

void Kilometerstand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Kilometerstand_message_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mileage_ = 0;
}

Kilometerstand::~Kilometerstand() {
  // @@protoc_insertion_point(destructor:Kilometerstand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Kilometerstand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Kilometerstand::ArenaDtor(void* object) {
  Kilometerstand* _this = reinterpret_cast< Kilometerstand* >(object);
  (void)_this;
}
void Kilometerstand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Kilometerstand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Kilometerstand& Kilometerstand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Kilometerstand_message_2eproto.base);
  return *internal_default_instance();
}


void Kilometerstand::Clear() {
// @@protoc_insertion_point(message_clear_start:Kilometerstand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmpty();
  }
  mileage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Kilometerstand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double mileage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_mileage(&has_bits);
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Kilometerstand.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Kilometerstand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kilometerstand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double mileage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mileage(), target);
  }

  // required string type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Kilometerstand.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kilometerstand)
  return target;
}

size_t Kilometerstand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Kilometerstand)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_mileage()) {
    // required double mileage = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Kilometerstand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kilometerstand)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required double mileage = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kilometerstand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kilometerstand)
  GOOGLE_DCHECK_NE(&from, this);
  const Kilometerstand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kilometerstand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kilometerstand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kilometerstand)
    MergeFrom(*source);
  }
}

void Kilometerstand::MergeFrom(const Kilometerstand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kilometerstand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      mileage_ = from.mileage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Kilometerstand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kilometerstand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kilometerstand::CopyFrom(const Kilometerstand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kilometerstand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kilometerstand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Kilometerstand::InternalSwap(Kilometerstand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mileage_, other->mileage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Kilometerstand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KilometerstandToHeadquarter::InitAsDefaultInstance() {
  ::_KilometerstandToHeadquarter_default_instance_._instance.get_mutable()->data_ = const_cast< ::Kilometerstand*>(
      ::Kilometerstand::internal_default_instance());
}
class KilometerstandToHeadquarter::_Internal {
 public:
  using HasBits = decltype(std::declval<KilometerstandToHeadquarter>()._has_bits_);
  static const ::Kilometerstand& data(const KilometerstandToHeadquarter* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::Kilometerstand&
KilometerstandToHeadquarter::_Internal::data(const KilometerstandToHeadquarter* msg) {
  return *msg->data_;
}
KilometerstandToHeadquarter::KilometerstandToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KilometerstandToHeadquarter)
}
KilometerstandToHeadquarter::KilometerstandToHeadquarter(const KilometerstandToHeadquarter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::Kilometerstand(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:KilometerstandToHeadquarter)
}

void KilometerstandToHeadquarter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KilometerstandToHeadquarter_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

KilometerstandToHeadquarter::~KilometerstandToHeadquarter() {
  // @@protoc_insertion_point(destructor:KilometerstandToHeadquarter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KilometerstandToHeadquarter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void KilometerstandToHeadquarter::ArenaDtor(void* object) {
  KilometerstandToHeadquarter* _this = reinterpret_cast< KilometerstandToHeadquarter* >(object);
  (void)_this;
}
void KilometerstandToHeadquarter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KilometerstandToHeadquarter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KilometerstandToHeadquarter& KilometerstandToHeadquarter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KilometerstandToHeadquarter_message_2eproto.base);
  return *internal_default_instance();
}


void KilometerstandToHeadquarter::Clear() {
// @@protoc_insertion_point(message_clear_start:KilometerstandToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KilometerstandToHeadquarter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Kilometerstand data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandToHeadquarter.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandToHeadquarter.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KilometerstandToHeadquarter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KilometerstandToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Kilometerstand data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandToHeadquarter.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandToHeadquarter.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KilometerstandToHeadquarter)
  return target;
}

size_t KilometerstandToHeadquarter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KilometerstandToHeadquarter)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .Kilometerstand data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t KilometerstandToHeadquarter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KilometerstandToHeadquarter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .Kilometerstand data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KilometerstandToHeadquarter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KilometerstandToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  const KilometerstandToHeadquarter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KilometerstandToHeadquarter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KilometerstandToHeadquarter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KilometerstandToHeadquarter)
    MergeFrom(*source);
  }
}

void KilometerstandToHeadquarter::MergeFrom(const KilometerstandToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KilometerstandToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::Kilometerstand::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void KilometerstandToHeadquarter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KilometerstandToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KilometerstandToHeadquarter::CopyFrom(const KilometerstandToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KilometerstandToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KilometerstandToHeadquarter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void KilometerstandToHeadquarter::InternalSwap(KilometerstandToHeadquarter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KilometerstandToHeadquarter, round_trip_)
      + sizeof(KilometerstandToHeadquarter::round_trip_)
      - PROTOBUF_FIELD_OFFSET(KilometerstandToHeadquarter, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KilometerstandToHeadquarter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KilometerstandToServer::InitAsDefaultInstance() {
  ::_KilometerstandToServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::KilometerstandToHeadquarter*>(
      ::KilometerstandToHeadquarter::internal_default_instance());
}
class KilometerstandToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<KilometerstandToServer>()._has_bits_);
  static const ::KilometerstandToHeadquarter& data(const KilometerstandToServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::KilometerstandToHeadquarter&
KilometerstandToServer::_Internal::data(const KilometerstandToServer* msg) {
  return *msg->data_;
}
KilometerstandToServer::KilometerstandToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KilometerstandToServer)
}
KilometerstandToServer::KilometerstandToServer(const KilometerstandToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::KilometerstandToHeadquarter(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:KilometerstandToServer)
}

void KilometerstandToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KilometerstandToServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

KilometerstandToServer::~KilometerstandToServer() {
  // @@protoc_insertion_point(destructor:KilometerstandToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KilometerstandToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void KilometerstandToServer::ArenaDtor(void* object) {
  KilometerstandToServer* _this = reinterpret_cast< KilometerstandToServer* >(object);
  (void)_this;
}
void KilometerstandToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KilometerstandToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KilometerstandToServer& KilometerstandToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KilometerstandToServer_message_2eproto.base);
  return *internal_default_instance();
}


void KilometerstandToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:KilometerstandToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KilometerstandToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .KilometerstandToHeadquarter data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandToServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandToServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KilometerstandToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KilometerstandToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KilometerstandToHeadquarter data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandToServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandToServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KilometerstandToServer)
  return target;
}

size_t KilometerstandToServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KilometerstandToServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .KilometerstandToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t KilometerstandToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KilometerstandToServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .KilometerstandToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KilometerstandToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KilometerstandToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const KilometerstandToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KilometerstandToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KilometerstandToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KilometerstandToServer)
    MergeFrom(*source);
  }
}

void KilometerstandToServer::MergeFrom(const KilometerstandToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KilometerstandToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::KilometerstandToHeadquarter::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void KilometerstandToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KilometerstandToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KilometerstandToServer::CopyFrom(const KilometerstandToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KilometerstandToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KilometerstandToServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void KilometerstandToServer::InternalSwap(KilometerstandToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KilometerstandToServer, round_trip_)
      + sizeof(KilometerstandToServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(KilometerstandToServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KilometerstandToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KilometerstandFromServer::InitAsDefaultInstance() {
  ::_KilometerstandFromServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::KilometerstandToServer*>(
      ::KilometerstandToServer::internal_default_instance());
}
class KilometerstandFromServer::_Internal {
 public:
  using HasBits = decltype(std::declval<KilometerstandFromServer>()._has_bits_);
  static const ::KilometerstandToServer& data(const KilometerstandFromServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::KilometerstandToServer&
KilometerstandFromServer::_Internal::data(const KilometerstandFromServer* msg) {
  return *msg->data_;
}
KilometerstandFromServer::KilometerstandFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KilometerstandFromServer)
}
KilometerstandFromServer::KilometerstandFromServer(const KilometerstandFromServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::KilometerstandToServer(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:KilometerstandFromServer)
}

void KilometerstandFromServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KilometerstandFromServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

KilometerstandFromServer::~KilometerstandFromServer() {
  // @@protoc_insertion_point(destructor:KilometerstandFromServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KilometerstandFromServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void KilometerstandFromServer::ArenaDtor(void* object) {
  KilometerstandFromServer* _this = reinterpret_cast< KilometerstandFromServer* >(object);
  (void)_this;
}
void KilometerstandFromServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KilometerstandFromServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KilometerstandFromServer& KilometerstandFromServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KilometerstandFromServer_message_2eproto.base);
  return *internal_default_instance();
}


void KilometerstandFromServer::Clear() {
// @@protoc_insertion_point(message_clear_start:KilometerstandFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KilometerstandFromServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .KilometerstandToServer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandFromServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KilometerstandFromServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KilometerstandFromServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KilometerstandFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KilometerstandToServer data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandFromServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KilometerstandFromServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KilometerstandFromServer)
  return target;
}

size_t KilometerstandFromServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KilometerstandFromServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .KilometerstandToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t KilometerstandFromServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KilometerstandFromServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .KilometerstandToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KilometerstandFromServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KilometerstandFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  const KilometerstandFromServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KilometerstandFromServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KilometerstandFromServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KilometerstandFromServer)
    MergeFrom(*source);
  }
}

void KilometerstandFromServer::MergeFrom(const KilometerstandFromServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KilometerstandFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::KilometerstandToServer::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void KilometerstandFromServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KilometerstandFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KilometerstandFromServer::CopyFrom(const KilometerstandFromServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KilometerstandFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KilometerstandFromServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void KilometerstandFromServer::InternalSwap(KilometerstandFromServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KilometerstandFromServer, round_trip_)
      + sizeof(KilometerstandFromServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(KilometerstandFromServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KilometerstandFromServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Verkehrssituation::InitAsDefaultInstance() {
}
class Verkehrssituation::_Internal {
 public:
  using HasBits = decltype(std::declval<Verkehrssituation>()._has_bits_);
  static void set_has_numeric_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rising(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Verkehrssituation::Verkehrssituation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Verkehrssituation)
}
Verkehrssituation::Verkehrssituation(const Verkehrssituation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&numeric_value_, &from.numeric_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&rising_) -
    reinterpret_cast<char*>(&numeric_value_)) + sizeof(rising_));
  // @@protoc_insertion_point(copy_constructor:Verkehrssituation)
}

void Verkehrssituation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Verkehrssituation_message_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&numeric_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rising_) -
      reinterpret_cast<char*>(&numeric_value_)) + sizeof(rising_));
}

Verkehrssituation::~Verkehrssituation() {
  // @@protoc_insertion_point(destructor:Verkehrssituation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Verkehrssituation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Verkehrssituation::ArenaDtor(void* object) {
  Verkehrssituation* _this = reinterpret_cast< Verkehrssituation* >(object);
  (void)_this;
}
void Verkehrssituation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Verkehrssituation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Verkehrssituation& Verkehrssituation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Verkehrssituation_message_2eproto.base);
  return *internal_default_instance();
}


void Verkehrssituation::Clear() {
// @@protoc_insertion_point(message_clear_start:Verkehrssituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&numeric_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rising_) -
        reinterpret_cast<char*>(&numeric_value_)) + sizeof(rising_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Verkehrssituation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double numeric_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_numeric_value(&has_bits);
          numeric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool rising = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rising(&has_bits);
          rising_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Verkehrssituation.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Verkehrssituation.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Verkehrssituation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Verkehrssituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double numeric_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_numeric_value(), target);
  }

  // required bool rising = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_rising(), target);
  }

  // required string value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Verkehrssituation.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // required string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Verkehrssituation.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Verkehrssituation)
  return target;
}

size_t Verkehrssituation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Verkehrssituation)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_type()) {
    // required string type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_numeric_value()) {
    // required double numeric_value = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_rising()) {
    // required bool rising = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Verkehrssituation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Verkehrssituation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required string type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required double numeric_value = 1;
    total_size += 1 + 8;

    // required bool rising = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Verkehrssituation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Verkehrssituation)
  GOOGLE_DCHECK_NE(&from, this);
  const Verkehrssituation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Verkehrssituation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Verkehrssituation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Verkehrssituation)
    MergeFrom(*source);
  }
}

void Verkehrssituation::MergeFrom(const Verkehrssituation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Verkehrssituation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      numeric_value_ = from.numeric_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      rising_ = from.rising_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Verkehrssituation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Verkehrssituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Verkehrssituation::CopyFrom(const Verkehrssituation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Verkehrssituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Verkehrssituation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Verkehrssituation::InternalSwap(Verkehrssituation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Verkehrssituation, rising_)
      + sizeof(Verkehrssituation::rising_)
      - PROTOBUF_FIELD_OFFSET(Verkehrssituation, numeric_value_)>(
          reinterpret_cast<char*>(&numeric_value_),
          reinterpret_cast<char*>(&other->numeric_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Verkehrssituation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerkehrssituationToHeadquarter::InitAsDefaultInstance() {
  ::_VerkehrssituationToHeadquarter_default_instance_._instance.get_mutable()->data_ = const_cast< ::Verkehrssituation*>(
      ::Verkehrssituation::internal_default_instance());
}
class VerkehrssituationToHeadquarter::_Internal {
 public:
  using HasBits = decltype(std::declval<VerkehrssituationToHeadquarter>()._has_bits_);
  static const ::Verkehrssituation& data(const VerkehrssituationToHeadquarter* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::Verkehrssituation&
VerkehrssituationToHeadquarter::_Internal::data(const VerkehrssituationToHeadquarter* msg) {
  return *msg->data_;
}
VerkehrssituationToHeadquarter::VerkehrssituationToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VerkehrssituationToHeadquarter)
}
VerkehrssituationToHeadquarter::VerkehrssituationToHeadquarter(const VerkehrssituationToHeadquarter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::Verkehrssituation(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:VerkehrssituationToHeadquarter)
}

void VerkehrssituationToHeadquarter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerkehrssituationToHeadquarter_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

VerkehrssituationToHeadquarter::~VerkehrssituationToHeadquarter() {
  // @@protoc_insertion_point(destructor:VerkehrssituationToHeadquarter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerkehrssituationToHeadquarter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void VerkehrssituationToHeadquarter::ArenaDtor(void* object) {
  VerkehrssituationToHeadquarter* _this = reinterpret_cast< VerkehrssituationToHeadquarter* >(object);
  (void)_this;
}
void VerkehrssituationToHeadquarter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerkehrssituationToHeadquarter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerkehrssituationToHeadquarter& VerkehrssituationToHeadquarter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerkehrssituationToHeadquarter_message_2eproto.base);
  return *internal_default_instance();
}


void VerkehrssituationToHeadquarter::Clear() {
// @@protoc_insertion_point(message_clear_start:VerkehrssituationToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerkehrssituationToHeadquarter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Verkehrssituation data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationToHeadquarter.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationToHeadquarter.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerkehrssituationToHeadquarter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerkehrssituationToHeadquarter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Verkehrssituation data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationToHeadquarter.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationToHeadquarter.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerkehrssituationToHeadquarter)
  return target;
}

size_t VerkehrssituationToHeadquarter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VerkehrssituationToHeadquarter)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .Verkehrssituation data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t VerkehrssituationToHeadquarter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerkehrssituationToHeadquarter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .Verkehrssituation data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerkehrssituationToHeadquarter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerkehrssituationToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  const VerkehrssituationToHeadquarter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerkehrssituationToHeadquarter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerkehrssituationToHeadquarter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerkehrssituationToHeadquarter)
    MergeFrom(*source);
  }
}

void VerkehrssituationToHeadquarter::MergeFrom(const VerkehrssituationToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerkehrssituationToHeadquarter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::Verkehrssituation::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void VerkehrssituationToHeadquarter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerkehrssituationToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerkehrssituationToHeadquarter::CopyFrom(const VerkehrssituationToHeadquarter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerkehrssituationToHeadquarter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerkehrssituationToHeadquarter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void VerkehrssituationToHeadquarter::InternalSwap(VerkehrssituationToHeadquarter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerkehrssituationToHeadquarter, round_trip_)
      + sizeof(VerkehrssituationToHeadquarter::round_trip_)
      - PROTOBUF_FIELD_OFFSET(VerkehrssituationToHeadquarter, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerkehrssituationToHeadquarter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerkehrssituationToServer::InitAsDefaultInstance() {
  ::_VerkehrssituationToServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::VerkehrssituationToHeadquarter*>(
      ::VerkehrssituationToHeadquarter::internal_default_instance());
}
class VerkehrssituationToServer::_Internal {
 public:
  using HasBits = decltype(std::declval<VerkehrssituationToServer>()._has_bits_);
  static const ::VerkehrssituationToHeadquarter& data(const VerkehrssituationToServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::VerkehrssituationToHeadquarter&
VerkehrssituationToServer::_Internal::data(const VerkehrssituationToServer* msg) {
  return *msg->data_;
}
VerkehrssituationToServer::VerkehrssituationToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VerkehrssituationToServer)
}
VerkehrssituationToServer::VerkehrssituationToServer(const VerkehrssituationToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::VerkehrssituationToHeadquarter(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:VerkehrssituationToServer)
}

void VerkehrssituationToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerkehrssituationToServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

VerkehrssituationToServer::~VerkehrssituationToServer() {
  // @@protoc_insertion_point(destructor:VerkehrssituationToServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerkehrssituationToServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void VerkehrssituationToServer::ArenaDtor(void* object) {
  VerkehrssituationToServer* _this = reinterpret_cast< VerkehrssituationToServer* >(object);
  (void)_this;
}
void VerkehrssituationToServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerkehrssituationToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerkehrssituationToServer& VerkehrssituationToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerkehrssituationToServer_message_2eproto.base);
  return *internal_default_instance();
}


void VerkehrssituationToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:VerkehrssituationToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerkehrssituationToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .VerkehrssituationToHeadquarter data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationToServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationToServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerkehrssituationToServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerkehrssituationToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .VerkehrssituationToHeadquarter data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationToServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationToServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerkehrssituationToServer)
  return target;
}

size_t VerkehrssituationToServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VerkehrssituationToServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .VerkehrssituationToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t VerkehrssituationToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerkehrssituationToServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .VerkehrssituationToHeadquarter data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerkehrssituationToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerkehrssituationToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const VerkehrssituationToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerkehrssituationToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerkehrssituationToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerkehrssituationToServer)
    MergeFrom(*source);
  }
}

void VerkehrssituationToServer::MergeFrom(const VerkehrssituationToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerkehrssituationToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::VerkehrssituationToHeadquarter::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void VerkehrssituationToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerkehrssituationToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerkehrssituationToServer::CopyFrom(const VerkehrssituationToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerkehrssituationToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerkehrssituationToServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void VerkehrssituationToServer::InternalSwap(VerkehrssituationToServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerkehrssituationToServer, round_trip_)
      + sizeof(VerkehrssituationToServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(VerkehrssituationToServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerkehrssituationToServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerkehrssituationFromServer::InitAsDefaultInstance() {
  ::_VerkehrssituationFromServer_default_instance_._instance.get_mutable()->data_ = const_cast< ::VerkehrssituationToServer*>(
      ::VerkehrssituationToServer::internal_default_instance());
}
class VerkehrssituationFromServer::_Internal {
 public:
  using HasBits = decltype(std::declval<VerkehrssituationFromServer>()._has_bits_);
  static const ::VerkehrssituationToServer& data(const VerkehrssituationFromServer* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_to_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000024) ^ 0x00000024) != 0;
  }
};

const ::VerkehrssituationToServer&
VerkehrssituationFromServer::_Internal::data(const VerkehrssituationFromServer* msg) {
  return *msg->data_;
}
VerkehrssituationFromServer::VerkehrssituationFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VerkehrssituationFromServer)
}
VerkehrssituationFromServer::VerkehrssituationFromServer(const VerkehrssituationFromServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_address()) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_address(),
      GetArena());
  }
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_address()) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_address(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::VerkehrssituationToServer(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&from_port_, &from.from_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_trip_) -
    reinterpret_cast<char*>(&from_port_)) + sizeof(round_trip_));
  // @@protoc_insertion_point(copy_constructor:VerkehrssituationFromServer)
}

void VerkehrssituationFromServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerkehrssituationFromServer_message_2eproto.base);
  from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_trip_) -
      reinterpret_cast<char*>(&data_)) + sizeof(round_trip_));
}

VerkehrssituationFromServer::~VerkehrssituationFromServer() {
  // @@protoc_insertion_point(destructor:VerkehrssituationFromServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerkehrssituationFromServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void VerkehrssituationFromServer::ArenaDtor(void* object) {
  VerkehrssituationFromServer* _this = reinterpret_cast< VerkehrssituationFromServer* >(object);
  (void)_this;
}
void VerkehrssituationFromServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerkehrssituationFromServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerkehrssituationFromServer& VerkehrssituationFromServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerkehrssituationFromServer_message_2eproto.base);
  return *internal_default_instance();
}


void VerkehrssituationFromServer::Clear() {
// @@protoc_insertion_point(message_clear_start:VerkehrssituationFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&from_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&from_port_)) + sizeof(latency_));
  }
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerkehrssituationFromServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .VerkehrssituationToServer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationFromServer.from_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_port(&has_bits);
          from_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerkehrssituationFromServer.to_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_to_port(&has_bits);
          to_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 send = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send(&has_bits);
          send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 received = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_received(&has_bits);
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 latency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 round_trip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_round_trip(&has_bits);
          round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerkehrssituationFromServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerkehrssituationFromServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .VerkehrssituationToServer data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_address().data(), static_cast<int>(this->_internal_from_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationFromServer.from_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_address(), target);
  }

  // optional int32 from_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_from_port(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_address().data(), static_cast<int>(this->_internal_to_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VerkehrssituationFromServer.to_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to_address(), target);
  }

  // optional int32 to_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_port(), target);
  }

  // required uint64 send = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send(), target);
  }

  // optional uint64 received = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_received(), target);
  }

  // optional uint64 latency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_latency(), target);
  }

  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_round_trip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerkehrssituationFromServer)
  return target;
}

size_t VerkehrssituationFromServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VerkehrssituationFromServer)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required .VerkehrssituationToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (_internal_has_send()) {
    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());
  }

  return total_size;
}
size_t VerkehrssituationFromServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerkehrssituationFromServer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000024) ^ 0x00000024) == 0) {  // All required fields are present.
    // required .VerkehrssituationToServer data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

    // required uint64 send = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_address());
    }

    // optional string to_address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_address());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 from_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_port());
    }

    // optional int32 to_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_port());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 received = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_received());
    }

    // optional uint64 latency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_latency());
    }

  }
  // optional uint64 round_trip = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_round_trip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerkehrssituationFromServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerkehrssituationFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  const VerkehrssituationFromServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerkehrssituationFromServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerkehrssituationFromServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerkehrssituationFromServer)
    MergeFrom(*source);
  }
}

void VerkehrssituationFromServer::MergeFrom(const VerkehrssituationFromServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerkehrssituationFromServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_address(from._internal_from_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_address(from._internal_to_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::VerkehrssituationToServer::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      from_port_ = from.from_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ = from.send_;
    }
    if (cached_has_bits & 0x00000040u) {
      received_ = from.received_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_round_trip(from._internal_round_trip());
  }
}

void VerkehrssituationFromServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerkehrssituationFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerkehrssituationFromServer::CopyFrom(const VerkehrssituationFromServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerkehrssituationFromServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerkehrssituationFromServer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void VerkehrssituationFromServer::InternalSwap(VerkehrssituationFromServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_address_.Swap(&other->from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_address_.Swap(&other->to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerkehrssituationFromServer, round_trip_)
      + sizeof(VerkehrssituationFromServer::round_trip_)
      - PROTOBUF_FIELD_OFFSET(VerkehrssituationFromServer, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerkehrssituationFromServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Durchschnittsgeschwindigkeit* Arena::CreateMaybeMessage< ::Durchschnittsgeschwindigkeit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Durchschnittsgeschwindigkeit >(arena);
}
template<> PROTOBUF_NOINLINE ::DurchschnittsgeschwindigkeitToHeadquarter* Arena::CreateMaybeMessage< ::DurchschnittsgeschwindigkeitToHeadquarter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DurchschnittsgeschwindigkeitToHeadquarter >(arena);
}
template<> PROTOBUF_NOINLINE ::DurchschnittsgeschwindigkeitToServer* Arena::CreateMaybeMessage< ::DurchschnittsgeschwindigkeitToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DurchschnittsgeschwindigkeitToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::DurchschnittsgeschwindigkeitFromServer* Arena::CreateMaybeMessage< ::DurchschnittsgeschwindigkeitFromServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DurchschnittsgeschwindigkeitFromServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Fuellstand* Arena::CreateMaybeMessage< ::Fuellstand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Fuellstand >(arena);
}
template<> PROTOBUF_NOINLINE ::FuellstandToHeadquarter* Arena::CreateMaybeMessage< ::FuellstandToHeadquarter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FuellstandToHeadquarter >(arena);
}
template<> PROTOBUF_NOINLINE ::FuellstandToServer* Arena::CreateMaybeMessage< ::FuellstandToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FuellstandToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::FuellstandFromServer* Arena::CreateMaybeMessage< ::FuellstandFromServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FuellstandFromServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Kilometerstand* Arena::CreateMaybeMessage< ::Kilometerstand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kilometerstand >(arena);
}
template<> PROTOBUF_NOINLINE ::KilometerstandToHeadquarter* Arena::CreateMaybeMessage< ::KilometerstandToHeadquarter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KilometerstandToHeadquarter >(arena);
}
template<> PROTOBUF_NOINLINE ::KilometerstandToServer* Arena::CreateMaybeMessage< ::KilometerstandToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KilometerstandToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::KilometerstandFromServer* Arena::CreateMaybeMessage< ::KilometerstandFromServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KilometerstandFromServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Verkehrssituation* Arena::CreateMaybeMessage< ::Verkehrssituation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Verkehrssituation >(arena);
}
template<> PROTOBUF_NOINLINE ::VerkehrssituationToHeadquarter* Arena::CreateMaybeMessage< ::VerkehrssituationToHeadquarter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VerkehrssituationToHeadquarter >(arena);
}
template<> PROTOBUF_NOINLINE ::VerkehrssituationToServer* Arena::CreateMaybeMessage< ::VerkehrssituationToServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VerkehrssituationToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::VerkehrssituationFromServer* Arena::CreateMaybeMessage< ::VerkehrssituationFromServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VerkehrssituationFromServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
