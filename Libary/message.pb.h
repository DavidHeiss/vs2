// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Durchschnittsgeschwindigkeit;
class DurchschnittsgeschwindigkeitDefaultTypeInternal;
extern DurchschnittsgeschwindigkeitDefaultTypeInternal _Durchschnittsgeschwindigkeit_default_instance_;
class DurchschnittsgeschwindigkeitFromServer;
class DurchschnittsgeschwindigkeitFromServerDefaultTypeInternal;
extern DurchschnittsgeschwindigkeitFromServerDefaultTypeInternal _DurchschnittsgeschwindigkeitFromServer_default_instance_;
class DurchschnittsgeschwindigkeitToHeadquarter;
class DurchschnittsgeschwindigkeitToHeadquarterDefaultTypeInternal;
extern DurchschnittsgeschwindigkeitToHeadquarterDefaultTypeInternal _DurchschnittsgeschwindigkeitToHeadquarter_default_instance_;
class DurchschnittsgeschwindigkeitToServer;
class DurchschnittsgeschwindigkeitToServerDefaultTypeInternal;
extern DurchschnittsgeschwindigkeitToServerDefaultTypeInternal _DurchschnittsgeschwindigkeitToServer_default_instance_;
class Fuellstand;
class FuellstandDefaultTypeInternal;
extern FuellstandDefaultTypeInternal _Fuellstand_default_instance_;
class FuellstandFromServer;
class FuellstandFromServerDefaultTypeInternal;
extern FuellstandFromServerDefaultTypeInternal _FuellstandFromServer_default_instance_;
class FuellstandToHeadquarter;
class FuellstandToHeadquarterDefaultTypeInternal;
extern FuellstandToHeadquarterDefaultTypeInternal _FuellstandToHeadquarter_default_instance_;
class FuellstandToServer;
class FuellstandToServerDefaultTypeInternal;
extern FuellstandToServerDefaultTypeInternal _FuellstandToServer_default_instance_;
class Kilometerstand;
class KilometerstandDefaultTypeInternal;
extern KilometerstandDefaultTypeInternal _Kilometerstand_default_instance_;
class KilometerstandFromServer;
class KilometerstandFromServerDefaultTypeInternal;
extern KilometerstandFromServerDefaultTypeInternal _KilometerstandFromServer_default_instance_;
class KilometerstandToHeadquarter;
class KilometerstandToHeadquarterDefaultTypeInternal;
extern KilometerstandToHeadquarterDefaultTypeInternal _KilometerstandToHeadquarter_default_instance_;
class KilometerstandToServer;
class KilometerstandToServerDefaultTypeInternal;
extern KilometerstandToServerDefaultTypeInternal _KilometerstandToServer_default_instance_;
class Verkehrssituation;
class VerkehrssituationDefaultTypeInternal;
extern VerkehrssituationDefaultTypeInternal _Verkehrssituation_default_instance_;
class VerkehrssituationFromServer;
class VerkehrssituationFromServerDefaultTypeInternal;
extern VerkehrssituationFromServerDefaultTypeInternal _VerkehrssituationFromServer_default_instance_;
class VerkehrssituationToHeadquarter;
class VerkehrssituationToHeadquarterDefaultTypeInternal;
extern VerkehrssituationToHeadquarterDefaultTypeInternal _VerkehrssituationToHeadquarter_default_instance_;
class VerkehrssituationToServer;
class VerkehrssituationToServerDefaultTypeInternal;
extern VerkehrssituationToServerDefaultTypeInternal _VerkehrssituationToServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Durchschnittsgeschwindigkeit* Arena::CreateMaybeMessage<::Durchschnittsgeschwindigkeit>(Arena*);
template<> ::DurchschnittsgeschwindigkeitFromServer* Arena::CreateMaybeMessage<::DurchschnittsgeschwindigkeitFromServer>(Arena*);
template<> ::DurchschnittsgeschwindigkeitToHeadquarter* Arena::CreateMaybeMessage<::DurchschnittsgeschwindigkeitToHeadquarter>(Arena*);
template<> ::DurchschnittsgeschwindigkeitToServer* Arena::CreateMaybeMessage<::DurchschnittsgeschwindigkeitToServer>(Arena*);
template<> ::Fuellstand* Arena::CreateMaybeMessage<::Fuellstand>(Arena*);
template<> ::FuellstandFromServer* Arena::CreateMaybeMessage<::FuellstandFromServer>(Arena*);
template<> ::FuellstandToHeadquarter* Arena::CreateMaybeMessage<::FuellstandToHeadquarter>(Arena*);
template<> ::FuellstandToServer* Arena::CreateMaybeMessage<::FuellstandToServer>(Arena*);
template<> ::Kilometerstand* Arena::CreateMaybeMessage<::Kilometerstand>(Arena*);
template<> ::KilometerstandFromServer* Arena::CreateMaybeMessage<::KilometerstandFromServer>(Arena*);
template<> ::KilometerstandToHeadquarter* Arena::CreateMaybeMessage<::KilometerstandToHeadquarter>(Arena*);
template<> ::KilometerstandToServer* Arena::CreateMaybeMessage<::KilometerstandToServer>(Arena*);
template<> ::Verkehrssituation* Arena::CreateMaybeMessage<::Verkehrssituation>(Arena*);
template<> ::VerkehrssituationFromServer* Arena::CreateMaybeMessage<::VerkehrssituationFromServer>(Arena*);
template<> ::VerkehrssituationToHeadquarter* Arena::CreateMaybeMessage<::VerkehrssituationToHeadquarter>(Arena*);
template<> ::VerkehrssituationToServer* Arena::CreateMaybeMessage<::VerkehrssituationToServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Durchschnittsgeschwindigkeit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Durchschnittsgeschwindigkeit) */ {
 public:
  inline Durchschnittsgeschwindigkeit() : Durchschnittsgeschwindigkeit(nullptr) {}
  virtual ~Durchschnittsgeschwindigkeit();

  Durchschnittsgeschwindigkeit(const Durchschnittsgeschwindigkeit& from);
  Durchschnittsgeschwindigkeit(Durchschnittsgeschwindigkeit&& from) noexcept
    : Durchschnittsgeschwindigkeit() {
    *this = ::std::move(from);
  }

  inline Durchschnittsgeschwindigkeit& operator=(const Durchschnittsgeschwindigkeit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Durchschnittsgeschwindigkeit& operator=(Durchschnittsgeschwindigkeit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Durchschnittsgeschwindigkeit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Durchschnittsgeschwindigkeit* internal_default_instance() {
    return reinterpret_cast<const Durchschnittsgeschwindigkeit*>(
               &_Durchschnittsgeschwindigkeit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Durchschnittsgeschwindigkeit& a, Durchschnittsgeschwindigkeit& b) {
    a.Swap(&b);
  }
  inline void Swap(Durchschnittsgeschwindigkeit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Durchschnittsgeschwindigkeit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Durchschnittsgeschwindigkeit* New() const final {
    return CreateMaybeMessage<Durchschnittsgeschwindigkeit>(nullptr);
  }

  Durchschnittsgeschwindigkeit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Durchschnittsgeschwindigkeit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Durchschnittsgeschwindigkeit& from);
  void MergeFrom(const Durchschnittsgeschwindigkeit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Durchschnittsgeschwindigkeit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Durchschnittsgeschwindigkeit";
  }
  protected:
  explicit Durchschnittsgeschwindigkeit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 10,
    kAccelerationFieldNumber = 2,
    kAverageSpeedFieldNumber = 3,
    kBreakingForceFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kMinSpeedFieldNumber = 6,
    kMaxSpeedFieldNumber = 7,
    kSpeedFieldNumber = 8,
    kStartTimeFieldNumber = 9,
    kAccelerateFieldNumber = 1,
  };
  // required string type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required double acceleration = 2;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // required double average_speed = 3;
  bool has_average_speed() const;
  private:
  bool _internal_has_average_speed() const;
  public:
  void clear_average_speed();
  double average_speed() const;
  void set_average_speed(double value);
  private:
  double _internal_average_speed() const;
  void _internal_set_average_speed(double value);
  public:

  // required double breaking_force = 4;
  bool has_breaking_force() const;
  private:
  bool _internal_has_breaking_force() const;
  public:
  void clear_breaking_force();
  double breaking_force() const;
  void set_breaking_force(double value);
  private:
  double _internal_breaking_force() const;
  void _internal_set_breaking_force(double value);
  public:

  // required double distance = 5;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // required double min_speed = 6;
  bool has_min_speed() const;
  private:
  bool _internal_has_min_speed() const;
  public:
  void clear_min_speed();
  double min_speed() const;
  void set_min_speed(double value);
  private:
  double _internal_min_speed() const;
  void _internal_set_min_speed(double value);
  public:

  // required double max_speed = 7;
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // required double speed = 8;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double start_time = 9;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // required bool accelerate = 1;
  bool has_accelerate() const;
  private:
  bool _internal_has_accelerate() const;
  public:
  void clear_accelerate();
  bool accelerate() const;
  void set_accelerate(bool value);
  private:
  bool _internal_accelerate() const;
  void _internal_set_accelerate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Durchschnittsgeschwindigkeit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double acceleration_;
  double average_speed_;
  double breaking_force_;
  double distance_;
  double min_speed_;
  double max_speed_;
  double speed_;
  double start_time_;
  bool accelerate_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DurchschnittsgeschwindigkeitToHeadquarter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DurchschnittsgeschwindigkeitToHeadquarter) */ {
 public:
  inline DurchschnittsgeschwindigkeitToHeadquarter() : DurchschnittsgeschwindigkeitToHeadquarter(nullptr) {}
  virtual ~DurchschnittsgeschwindigkeitToHeadquarter();

  DurchschnittsgeschwindigkeitToHeadquarter(const DurchschnittsgeschwindigkeitToHeadquarter& from);
  DurchschnittsgeschwindigkeitToHeadquarter(DurchschnittsgeschwindigkeitToHeadquarter&& from) noexcept
    : DurchschnittsgeschwindigkeitToHeadquarter() {
    *this = ::std::move(from);
  }

  inline DurchschnittsgeschwindigkeitToHeadquarter& operator=(const DurchschnittsgeschwindigkeitToHeadquarter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurchschnittsgeschwindigkeitToHeadquarter& operator=(DurchschnittsgeschwindigkeitToHeadquarter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DurchschnittsgeschwindigkeitToHeadquarter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurchschnittsgeschwindigkeitToHeadquarter* internal_default_instance() {
    return reinterpret_cast<const DurchschnittsgeschwindigkeitToHeadquarter*>(
               &_DurchschnittsgeschwindigkeitToHeadquarter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DurchschnittsgeschwindigkeitToHeadquarter& a, DurchschnittsgeschwindigkeitToHeadquarter& b) {
    a.Swap(&b);
  }
  inline void Swap(DurchschnittsgeschwindigkeitToHeadquarter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurchschnittsgeschwindigkeitToHeadquarter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurchschnittsgeschwindigkeitToHeadquarter* New() const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitToHeadquarter>(nullptr);
  }

  DurchschnittsgeschwindigkeitToHeadquarter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitToHeadquarter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurchschnittsgeschwindigkeitToHeadquarter& from);
  void MergeFrom(const DurchschnittsgeschwindigkeitToHeadquarter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurchschnittsgeschwindigkeitToHeadquarter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DurchschnittsgeschwindigkeitToHeadquarter";
  }
  protected:
  explicit DurchschnittsgeschwindigkeitToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .Durchschnittsgeschwindigkeit data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Durchschnittsgeschwindigkeit& data() const;
  ::Durchschnittsgeschwindigkeit* release_data();
  ::Durchschnittsgeschwindigkeit* mutable_data();
  void set_allocated_data(::Durchschnittsgeschwindigkeit* data);
  private:
  const ::Durchschnittsgeschwindigkeit& _internal_data() const;
  ::Durchschnittsgeschwindigkeit* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Durchschnittsgeschwindigkeit* data);
  ::Durchschnittsgeschwindigkeit* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DurchschnittsgeschwindigkeitToHeadquarter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::Durchschnittsgeschwindigkeit* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DurchschnittsgeschwindigkeitToServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DurchschnittsgeschwindigkeitToServer) */ {
 public:
  inline DurchschnittsgeschwindigkeitToServer() : DurchschnittsgeschwindigkeitToServer(nullptr) {}
  virtual ~DurchschnittsgeschwindigkeitToServer();

  DurchschnittsgeschwindigkeitToServer(const DurchschnittsgeschwindigkeitToServer& from);
  DurchschnittsgeschwindigkeitToServer(DurchschnittsgeschwindigkeitToServer&& from) noexcept
    : DurchschnittsgeschwindigkeitToServer() {
    *this = ::std::move(from);
  }

  inline DurchschnittsgeschwindigkeitToServer& operator=(const DurchschnittsgeschwindigkeitToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurchschnittsgeschwindigkeitToServer& operator=(DurchschnittsgeschwindigkeitToServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DurchschnittsgeschwindigkeitToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurchschnittsgeschwindigkeitToServer* internal_default_instance() {
    return reinterpret_cast<const DurchschnittsgeschwindigkeitToServer*>(
               &_DurchschnittsgeschwindigkeitToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DurchschnittsgeschwindigkeitToServer& a, DurchschnittsgeschwindigkeitToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(DurchschnittsgeschwindigkeitToServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurchschnittsgeschwindigkeitToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurchschnittsgeschwindigkeitToServer* New() const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitToServer>(nullptr);
  }

  DurchschnittsgeschwindigkeitToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurchschnittsgeschwindigkeitToServer& from);
  void MergeFrom(const DurchschnittsgeschwindigkeitToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurchschnittsgeschwindigkeitToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DurchschnittsgeschwindigkeitToServer";
  }
  protected:
  explicit DurchschnittsgeschwindigkeitToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DurchschnittsgeschwindigkeitToHeadquarter& data() const;
  ::DurchschnittsgeschwindigkeitToHeadquarter* release_data();
  ::DurchschnittsgeschwindigkeitToHeadquarter* mutable_data();
  void set_allocated_data(::DurchschnittsgeschwindigkeitToHeadquarter* data);
  private:
  const ::DurchschnittsgeschwindigkeitToHeadquarter& _internal_data() const;
  ::DurchschnittsgeschwindigkeitToHeadquarter* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DurchschnittsgeschwindigkeitToHeadquarter* data);
  ::DurchschnittsgeschwindigkeitToHeadquarter* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DurchschnittsgeschwindigkeitToServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::DurchschnittsgeschwindigkeitToHeadquarter* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DurchschnittsgeschwindigkeitFromServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DurchschnittsgeschwindigkeitFromServer) */ {
 public:
  inline DurchschnittsgeschwindigkeitFromServer() : DurchschnittsgeschwindigkeitFromServer(nullptr) {}
  virtual ~DurchschnittsgeschwindigkeitFromServer();

  DurchschnittsgeschwindigkeitFromServer(const DurchschnittsgeschwindigkeitFromServer& from);
  DurchschnittsgeschwindigkeitFromServer(DurchschnittsgeschwindigkeitFromServer&& from) noexcept
    : DurchschnittsgeschwindigkeitFromServer() {
    *this = ::std::move(from);
  }

  inline DurchschnittsgeschwindigkeitFromServer& operator=(const DurchschnittsgeschwindigkeitFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurchschnittsgeschwindigkeitFromServer& operator=(DurchschnittsgeschwindigkeitFromServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DurchschnittsgeschwindigkeitFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurchschnittsgeschwindigkeitFromServer* internal_default_instance() {
    return reinterpret_cast<const DurchschnittsgeschwindigkeitFromServer*>(
               &_DurchschnittsgeschwindigkeitFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DurchschnittsgeschwindigkeitFromServer& a, DurchschnittsgeschwindigkeitFromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(DurchschnittsgeschwindigkeitFromServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurchschnittsgeschwindigkeitFromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurchschnittsgeschwindigkeitFromServer* New() const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitFromServer>(nullptr);
  }

  DurchschnittsgeschwindigkeitFromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurchschnittsgeschwindigkeitFromServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurchschnittsgeschwindigkeitFromServer& from);
  void MergeFrom(const DurchschnittsgeschwindigkeitFromServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurchschnittsgeschwindigkeitFromServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DurchschnittsgeschwindigkeitFromServer";
  }
  protected:
  explicit DurchschnittsgeschwindigkeitFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .DurchschnittsgeschwindigkeitToServer data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DurchschnittsgeschwindigkeitToServer& data() const;
  ::DurchschnittsgeschwindigkeitToServer* release_data();
  ::DurchschnittsgeschwindigkeitToServer* mutable_data();
  void set_allocated_data(::DurchschnittsgeschwindigkeitToServer* data);
  private:
  const ::DurchschnittsgeschwindigkeitToServer& _internal_data() const;
  ::DurchschnittsgeschwindigkeitToServer* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DurchschnittsgeschwindigkeitToServer* data);
  ::DurchschnittsgeschwindigkeitToServer* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DurchschnittsgeschwindigkeitFromServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::DurchschnittsgeschwindigkeitToServer* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Fuellstand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fuellstand) */ {
 public:
  inline Fuellstand() : Fuellstand(nullptr) {}
  virtual ~Fuellstand();

  Fuellstand(const Fuellstand& from);
  Fuellstand(Fuellstand&& from) noexcept
    : Fuellstand() {
    *this = ::std::move(from);
  }

  inline Fuellstand& operator=(const Fuellstand& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fuellstand& operator=(Fuellstand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fuellstand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fuellstand* internal_default_instance() {
    return reinterpret_cast<const Fuellstand*>(
               &_Fuellstand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fuellstand& a, Fuellstand& b) {
    a.Swap(&b);
  }
  inline void Swap(Fuellstand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fuellstand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fuellstand* New() const final {
    return CreateMaybeMessage<Fuellstand>(nullptr);
  }

  Fuellstand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fuellstand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fuellstand& from);
  void MergeFrom(const Fuellstand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fuellstand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fuellstand";
  }
  protected:
  explicit Fuellstand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 8,
    kCapacityFieldNumber = 1,
    kConsumptionFieldNumber = 2,
    kCurrentCapacityFieldNumber = 3,
    kLastRefueldFieldNumber = 4,
    kLevelFieldNumber = 5,
    kUssageFieldNumber = 6,
    kWillRefillFieldNumber = 7,
  };
  // required string type = 8;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required double capacity = 1;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  double capacity() const;
  void set_capacity(double value);
  private:
  double _internal_capacity() const;
  void _internal_set_capacity(double value);
  public:

  // required double consumption = 2;
  bool has_consumption() const;
  private:
  bool _internal_has_consumption() const;
  public:
  void clear_consumption();
  double consumption() const;
  void set_consumption(double value);
  private:
  double _internal_consumption() const;
  void _internal_set_consumption(double value);
  public:

  // required double current_capacity = 3;
  bool has_current_capacity() const;
  private:
  bool _internal_has_current_capacity() const;
  public:
  void clear_current_capacity();
  double current_capacity() const;
  void set_current_capacity(double value);
  private:
  double _internal_current_capacity() const;
  void _internal_set_current_capacity(double value);
  public:

  // required double last_refueld = 4;
  bool has_last_refueld() const;
  private:
  bool _internal_has_last_refueld() const;
  public:
  void clear_last_refueld();
  double last_refueld() const;
  void set_last_refueld(double value);
  private:
  double _internal_last_refueld() const;
  void _internal_set_last_refueld(double value);
  public:

  // required double level = 5;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  double level() const;
  void set_level(double value);
  private:
  double _internal_level() const;
  void _internal_set_level(double value);
  public:

  // required double ussage = 6;
  bool has_ussage() const;
  private:
  bool _internal_has_ussage() const;
  public:
  void clear_ussage();
  double ussage() const;
  void set_ussage(double value);
  private:
  double _internal_ussage() const;
  void _internal_set_ussage(double value);
  public:

  // required double will_refill = 7;
  bool has_will_refill() const;
  private:
  bool _internal_has_will_refill() const;
  public:
  void clear_will_refill();
  double will_refill() const;
  void set_will_refill(double value);
  private:
  double _internal_will_refill() const;
  void _internal_set_will_refill(double value);
  public:

  // @@protoc_insertion_point(class_scope:Fuellstand)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double capacity_;
  double consumption_;
  double current_capacity_;
  double last_refueld_;
  double level_;
  double ussage_;
  double will_refill_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FuellstandToHeadquarter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FuellstandToHeadquarter) */ {
 public:
  inline FuellstandToHeadquarter() : FuellstandToHeadquarter(nullptr) {}
  virtual ~FuellstandToHeadquarter();

  FuellstandToHeadquarter(const FuellstandToHeadquarter& from);
  FuellstandToHeadquarter(FuellstandToHeadquarter&& from) noexcept
    : FuellstandToHeadquarter() {
    *this = ::std::move(from);
  }

  inline FuellstandToHeadquarter& operator=(const FuellstandToHeadquarter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuellstandToHeadquarter& operator=(FuellstandToHeadquarter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuellstandToHeadquarter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuellstandToHeadquarter* internal_default_instance() {
    return reinterpret_cast<const FuellstandToHeadquarter*>(
               &_FuellstandToHeadquarter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FuellstandToHeadquarter& a, FuellstandToHeadquarter& b) {
    a.Swap(&b);
  }
  inline void Swap(FuellstandToHeadquarter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuellstandToHeadquarter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuellstandToHeadquarter* New() const final {
    return CreateMaybeMessage<FuellstandToHeadquarter>(nullptr);
  }

  FuellstandToHeadquarter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuellstandToHeadquarter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuellstandToHeadquarter& from);
  void MergeFrom(const FuellstandToHeadquarter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuellstandToHeadquarter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FuellstandToHeadquarter";
  }
  protected:
  explicit FuellstandToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .Fuellstand data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Fuellstand& data() const;
  ::Fuellstand* release_data();
  ::Fuellstand* mutable_data();
  void set_allocated_data(::Fuellstand* data);
  private:
  const ::Fuellstand& _internal_data() const;
  ::Fuellstand* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Fuellstand* data);
  ::Fuellstand* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FuellstandToHeadquarter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::Fuellstand* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FuellstandToServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FuellstandToServer) */ {
 public:
  inline FuellstandToServer() : FuellstandToServer(nullptr) {}
  virtual ~FuellstandToServer();

  FuellstandToServer(const FuellstandToServer& from);
  FuellstandToServer(FuellstandToServer&& from) noexcept
    : FuellstandToServer() {
    *this = ::std::move(from);
  }

  inline FuellstandToServer& operator=(const FuellstandToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuellstandToServer& operator=(FuellstandToServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuellstandToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuellstandToServer* internal_default_instance() {
    return reinterpret_cast<const FuellstandToServer*>(
               &_FuellstandToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FuellstandToServer& a, FuellstandToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(FuellstandToServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuellstandToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuellstandToServer* New() const final {
    return CreateMaybeMessage<FuellstandToServer>(nullptr);
  }

  FuellstandToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuellstandToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuellstandToServer& from);
  void MergeFrom(const FuellstandToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuellstandToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FuellstandToServer";
  }
  protected:
  explicit FuellstandToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .FuellstandToHeadquarter data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::FuellstandToHeadquarter& data() const;
  ::FuellstandToHeadquarter* release_data();
  ::FuellstandToHeadquarter* mutable_data();
  void set_allocated_data(::FuellstandToHeadquarter* data);
  private:
  const ::FuellstandToHeadquarter& _internal_data() const;
  ::FuellstandToHeadquarter* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::FuellstandToHeadquarter* data);
  ::FuellstandToHeadquarter* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FuellstandToServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::FuellstandToHeadquarter* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FuellstandFromServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FuellstandFromServer) */ {
 public:
  inline FuellstandFromServer() : FuellstandFromServer(nullptr) {}
  virtual ~FuellstandFromServer();

  FuellstandFromServer(const FuellstandFromServer& from);
  FuellstandFromServer(FuellstandFromServer&& from) noexcept
    : FuellstandFromServer() {
    *this = ::std::move(from);
  }

  inline FuellstandFromServer& operator=(const FuellstandFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuellstandFromServer& operator=(FuellstandFromServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuellstandFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuellstandFromServer* internal_default_instance() {
    return reinterpret_cast<const FuellstandFromServer*>(
               &_FuellstandFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FuellstandFromServer& a, FuellstandFromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(FuellstandFromServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuellstandFromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuellstandFromServer* New() const final {
    return CreateMaybeMessage<FuellstandFromServer>(nullptr);
  }

  FuellstandFromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuellstandFromServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuellstandFromServer& from);
  void MergeFrom(const FuellstandFromServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuellstandFromServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FuellstandFromServer";
  }
  protected:
  explicit FuellstandFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .FuellstandToServer data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::FuellstandToServer& data() const;
  ::FuellstandToServer* release_data();
  ::FuellstandToServer* mutable_data();
  void set_allocated_data(::FuellstandToServer* data);
  private:
  const ::FuellstandToServer& _internal_data() const;
  ::FuellstandToServer* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::FuellstandToServer* data);
  ::FuellstandToServer* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FuellstandFromServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::FuellstandToServer* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Kilometerstand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kilometerstand) */ {
 public:
  inline Kilometerstand() : Kilometerstand(nullptr) {}
  virtual ~Kilometerstand();

  Kilometerstand(const Kilometerstand& from);
  Kilometerstand(Kilometerstand&& from) noexcept
    : Kilometerstand() {
    *this = ::std::move(from);
  }

  inline Kilometerstand& operator=(const Kilometerstand& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kilometerstand& operator=(Kilometerstand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kilometerstand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kilometerstand* internal_default_instance() {
    return reinterpret_cast<const Kilometerstand*>(
               &_Kilometerstand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Kilometerstand& a, Kilometerstand& b) {
    a.Swap(&b);
  }
  inline void Swap(Kilometerstand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kilometerstand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kilometerstand* New() const final {
    return CreateMaybeMessage<Kilometerstand>(nullptr);
  }

  Kilometerstand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kilometerstand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kilometerstand& from);
  void MergeFrom(const Kilometerstand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kilometerstand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kilometerstand";
  }
  protected:
  explicit Kilometerstand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kMileageFieldNumber = 1,
  };
  // required string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required double mileage = 1;
  bool has_mileage() const;
  private:
  bool _internal_has_mileage() const;
  public:
  void clear_mileage();
  double mileage() const;
  void set_mileage(double value);
  private:
  double _internal_mileage() const;
  void _internal_set_mileage(double value);
  public:

  // @@protoc_insertion_point(class_scope:Kilometerstand)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double mileage_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KilometerstandToHeadquarter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KilometerstandToHeadquarter) */ {
 public:
  inline KilometerstandToHeadquarter() : KilometerstandToHeadquarter(nullptr) {}
  virtual ~KilometerstandToHeadquarter();

  KilometerstandToHeadquarter(const KilometerstandToHeadquarter& from);
  KilometerstandToHeadquarter(KilometerstandToHeadquarter&& from) noexcept
    : KilometerstandToHeadquarter() {
    *this = ::std::move(from);
  }

  inline KilometerstandToHeadquarter& operator=(const KilometerstandToHeadquarter& from) {
    CopyFrom(from);
    return *this;
  }
  inline KilometerstandToHeadquarter& operator=(KilometerstandToHeadquarter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KilometerstandToHeadquarter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KilometerstandToHeadquarter* internal_default_instance() {
    return reinterpret_cast<const KilometerstandToHeadquarter*>(
               &_KilometerstandToHeadquarter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KilometerstandToHeadquarter& a, KilometerstandToHeadquarter& b) {
    a.Swap(&b);
  }
  inline void Swap(KilometerstandToHeadquarter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KilometerstandToHeadquarter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KilometerstandToHeadquarter* New() const final {
    return CreateMaybeMessage<KilometerstandToHeadquarter>(nullptr);
  }

  KilometerstandToHeadquarter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KilometerstandToHeadquarter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KilometerstandToHeadquarter& from);
  void MergeFrom(const KilometerstandToHeadquarter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KilometerstandToHeadquarter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KilometerstandToHeadquarter";
  }
  protected:
  explicit KilometerstandToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .Kilometerstand data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Kilometerstand& data() const;
  ::Kilometerstand* release_data();
  ::Kilometerstand* mutable_data();
  void set_allocated_data(::Kilometerstand* data);
  private:
  const ::Kilometerstand& _internal_data() const;
  ::Kilometerstand* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Kilometerstand* data);
  ::Kilometerstand* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:KilometerstandToHeadquarter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::Kilometerstand* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KilometerstandToServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KilometerstandToServer) */ {
 public:
  inline KilometerstandToServer() : KilometerstandToServer(nullptr) {}
  virtual ~KilometerstandToServer();

  KilometerstandToServer(const KilometerstandToServer& from);
  KilometerstandToServer(KilometerstandToServer&& from) noexcept
    : KilometerstandToServer() {
    *this = ::std::move(from);
  }

  inline KilometerstandToServer& operator=(const KilometerstandToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KilometerstandToServer& operator=(KilometerstandToServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KilometerstandToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KilometerstandToServer* internal_default_instance() {
    return reinterpret_cast<const KilometerstandToServer*>(
               &_KilometerstandToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KilometerstandToServer& a, KilometerstandToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(KilometerstandToServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KilometerstandToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KilometerstandToServer* New() const final {
    return CreateMaybeMessage<KilometerstandToServer>(nullptr);
  }

  KilometerstandToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KilometerstandToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KilometerstandToServer& from);
  void MergeFrom(const KilometerstandToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KilometerstandToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KilometerstandToServer";
  }
  protected:
  explicit KilometerstandToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .KilometerstandToHeadquarter data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KilometerstandToHeadquarter& data() const;
  ::KilometerstandToHeadquarter* release_data();
  ::KilometerstandToHeadquarter* mutable_data();
  void set_allocated_data(::KilometerstandToHeadquarter* data);
  private:
  const ::KilometerstandToHeadquarter& _internal_data() const;
  ::KilometerstandToHeadquarter* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KilometerstandToHeadquarter* data);
  ::KilometerstandToHeadquarter* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:KilometerstandToServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::KilometerstandToHeadquarter* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KilometerstandFromServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KilometerstandFromServer) */ {
 public:
  inline KilometerstandFromServer() : KilometerstandFromServer(nullptr) {}
  virtual ~KilometerstandFromServer();

  KilometerstandFromServer(const KilometerstandFromServer& from);
  KilometerstandFromServer(KilometerstandFromServer&& from) noexcept
    : KilometerstandFromServer() {
    *this = ::std::move(from);
  }

  inline KilometerstandFromServer& operator=(const KilometerstandFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KilometerstandFromServer& operator=(KilometerstandFromServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KilometerstandFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KilometerstandFromServer* internal_default_instance() {
    return reinterpret_cast<const KilometerstandFromServer*>(
               &_KilometerstandFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KilometerstandFromServer& a, KilometerstandFromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(KilometerstandFromServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KilometerstandFromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KilometerstandFromServer* New() const final {
    return CreateMaybeMessage<KilometerstandFromServer>(nullptr);
  }

  KilometerstandFromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KilometerstandFromServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KilometerstandFromServer& from);
  void MergeFrom(const KilometerstandFromServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KilometerstandFromServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KilometerstandFromServer";
  }
  protected:
  explicit KilometerstandFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .KilometerstandToServer data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KilometerstandToServer& data() const;
  ::KilometerstandToServer* release_data();
  ::KilometerstandToServer* mutable_data();
  void set_allocated_data(::KilometerstandToServer* data);
  private:
  const ::KilometerstandToServer& _internal_data() const;
  ::KilometerstandToServer* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KilometerstandToServer* data);
  ::KilometerstandToServer* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:KilometerstandFromServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::KilometerstandToServer* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Verkehrssituation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Verkehrssituation) */ {
 public:
  inline Verkehrssituation() : Verkehrssituation(nullptr) {}
  virtual ~Verkehrssituation();

  Verkehrssituation(const Verkehrssituation& from);
  Verkehrssituation(Verkehrssituation&& from) noexcept
    : Verkehrssituation() {
    *this = ::std::move(from);
  }

  inline Verkehrssituation& operator=(const Verkehrssituation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Verkehrssituation& operator=(Verkehrssituation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Verkehrssituation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Verkehrssituation* internal_default_instance() {
    return reinterpret_cast<const Verkehrssituation*>(
               &_Verkehrssituation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Verkehrssituation& a, Verkehrssituation& b) {
    a.Swap(&b);
  }
  inline void Swap(Verkehrssituation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Verkehrssituation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Verkehrssituation* New() const final {
    return CreateMaybeMessage<Verkehrssituation>(nullptr);
  }

  Verkehrssituation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Verkehrssituation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Verkehrssituation& from);
  void MergeFrom(const Verkehrssituation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Verkehrssituation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Verkehrssituation";
  }
  protected:
  explicit Verkehrssituation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kTypeFieldNumber = 4,
    kNumericValueFieldNumber = 1,
    kRisingFieldNumber = 2,
  };
  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required string type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required double numeric_value = 1;
  bool has_numeric_value() const;
  private:
  bool _internal_has_numeric_value() const;
  public:
  void clear_numeric_value();
  double numeric_value() const;
  void set_numeric_value(double value);
  private:
  double _internal_numeric_value() const;
  void _internal_set_numeric_value(double value);
  public:

  // required bool rising = 2;
  bool has_rising() const;
  private:
  bool _internal_has_rising() const;
  public:
  void clear_rising();
  bool rising() const;
  void set_rising(bool value);
  private:
  bool _internal_rising() const;
  void _internal_set_rising(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Verkehrssituation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double numeric_value_;
  bool rising_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VerkehrssituationToHeadquarter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerkehrssituationToHeadquarter) */ {
 public:
  inline VerkehrssituationToHeadquarter() : VerkehrssituationToHeadquarter(nullptr) {}
  virtual ~VerkehrssituationToHeadquarter();

  VerkehrssituationToHeadquarter(const VerkehrssituationToHeadquarter& from);
  VerkehrssituationToHeadquarter(VerkehrssituationToHeadquarter&& from) noexcept
    : VerkehrssituationToHeadquarter() {
    *this = ::std::move(from);
  }

  inline VerkehrssituationToHeadquarter& operator=(const VerkehrssituationToHeadquarter& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerkehrssituationToHeadquarter& operator=(VerkehrssituationToHeadquarter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerkehrssituationToHeadquarter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerkehrssituationToHeadquarter* internal_default_instance() {
    return reinterpret_cast<const VerkehrssituationToHeadquarter*>(
               &_VerkehrssituationToHeadquarter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VerkehrssituationToHeadquarter& a, VerkehrssituationToHeadquarter& b) {
    a.Swap(&b);
  }
  inline void Swap(VerkehrssituationToHeadquarter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerkehrssituationToHeadquarter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerkehrssituationToHeadquarter* New() const final {
    return CreateMaybeMessage<VerkehrssituationToHeadquarter>(nullptr);
  }

  VerkehrssituationToHeadquarter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerkehrssituationToHeadquarter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerkehrssituationToHeadquarter& from);
  void MergeFrom(const VerkehrssituationToHeadquarter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerkehrssituationToHeadquarter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerkehrssituationToHeadquarter";
  }
  protected:
  explicit VerkehrssituationToHeadquarter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .Verkehrssituation data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Verkehrssituation& data() const;
  ::Verkehrssituation* release_data();
  ::Verkehrssituation* mutable_data();
  void set_allocated_data(::Verkehrssituation* data);
  private:
  const ::Verkehrssituation& _internal_data() const;
  ::Verkehrssituation* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Verkehrssituation* data);
  ::Verkehrssituation* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VerkehrssituationToHeadquarter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::Verkehrssituation* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VerkehrssituationToServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerkehrssituationToServer) */ {
 public:
  inline VerkehrssituationToServer() : VerkehrssituationToServer(nullptr) {}
  virtual ~VerkehrssituationToServer();

  VerkehrssituationToServer(const VerkehrssituationToServer& from);
  VerkehrssituationToServer(VerkehrssituationToServer&& from) noexcept
    : VerkehrssituationToServer() {
    *this = ::std::move(from);
  }

  inline VerkehrssituationToServer& operator=(const VerkehrssituationToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerkehrssituationToServer& operator=(VerkehrssituationToServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerkehrssituationToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerkehrssituationToServer* internal_default_instance() {
    return reinterpret_cast<const VerkehrssituationToServer*>(
               &_VerkehrssituationToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VerkehrssituationToServer& a, VerkehrssituationToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(VerkehrssituationToServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerkehrssituationToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerkehrssituationToServer* New() const final {
    return CreateMaybeMessage<VerkehrssituationToServer>(nullptr);
  }

  VerkehrssituationToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerkehrssituationToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerkehrssituationToServer& from);
  void MergeFrom(const VerkehrssituationToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerkehrssituationToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerkehrssituationToServer";
  }
  protected:
  explicit VerkehrssituationToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .VerkehrssituationToHeadquarter data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::VerkehrssituationToHeadquarter& data() const;
  ::VerkehrssituationToHeadquarter* release_data();
  ::VerkehrssituationToHeadquarter* mutable_data();
  void set_allocated_data(::VerkehrssituationToHeadquarter* data);
  private:
  const ::VerkehrssituationToHeadquarter& _internal_data() const;
  ::VerkehrssituationToHeadquarter* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::VerkehrssituationToHeadquarter* data);
  ::VerkehrssituationToHeadquarter* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VerkehrssituationToServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::VerkehrssituationToHeadquarter* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VerkehrssituationFromServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerkehrssituationFromServer) */ {
 public:
  inline VerkehrssituationFromServer() : VerkehrssituationFromServer(nullptr) {}
  virtual ~VerkehrssituationFromServer();

  VerkehrssituationFromServer(const VerkehrssituationFromServer& from);
  VerkehrssituationFromServer(VerkehrssituationFromServer&& from) noexcept
    : VerkehrssituationFromServer() {
    *this = ::std::move(from);
  }

  inline VerkehrssituationFromServer& operator=(const VerkehrssituationFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerkehrssituationFromServer& operator=(VerkehrssituationFromServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerkehrssituationFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerkehrssituationFromServer* internal_default_instance() {
    return reinterpret_cast<const VerkehrssituationFromServer*>(
               &_VerkehrssituationFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VerkehrssituationFromServer& a, VerkehrssituationFromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(VerkehrssituationFromServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerkehrssituationFromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerkehrssituationFromServer* New() const final {
    return CreateMaybeMessage<VerkehrssituationFromServer>(nullptr);
  }

  VerkehrssituationFromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerkehrssituationFromServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerkehrssituationFromServer& from);
  void MergeFrom(const VerkehrssituationFromServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerkehrssituationFromServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerkehrssituationFromServer";
  }
  protected:
  explicit VerkehrssituationFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddressFieldNumber = 2,
    kToAddressFieldNumber = 4,
    kDataFieldNumber = 1,
    kFromPortFieldNumber = 3,
    kToPortFieldNumber = 5,
    kSendFieldNumber = 6,
    kReceivedFieldNumber = 7,
    kLatencyFieldNumber = 8,
    kRoundTripFieldNumber = 9,
  };
  // optional string from_address = 2;
  bool has_from_address() const;
  private:
  bool _internal_has_from_address() const;
  public:
  void clear_from_address();
  const std::string& from_address() const;
  void set_from_address(const std::string& value);
  void set_from_address(std::string&& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  std::string* mutable_from_address();
  std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // optional string to_address = 4;
  bool has_to_address() const;
  private:
  bool _internal_has_to_address() const;
  public:
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // required .VerkehrssituationToServer data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::VerkehrssituationToServer& data() const;
  ::VerkehrssituationToServer* release_data();
  ::VerkehrssituationToServer* mutable_data();
  void set_allocated_data(::VerkehrssituationToServer* data);
  private:
  const ::VerkehrssituationToServer& _internal_data() const;
  ::VerkehrssituationToServer* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::VerkehrssituationToServer* data);
  ::VerkehrssituationToServer* unsafe_arena_release_data();

  // optional int32 from_port = 3;
  bool has_from_port() const;
  private:
  bool _internal_has_from_port() const;
  public:
  void clear_from_port();
  ::PROTOBUF_NAMESPACE_ID::int32 from_port() const;
  void set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_port() const;
  void _internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_port = 5;
  bool has_to_port() const;
  private:
  bool _internal_has_to_port() const;
  public:
  void clear_to_port();
  ::PROTOBUF_NAMESPACE_ID::int32 to_port() const;
  void set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_port() const;
  void _internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 send = 6;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  ::PROTOBUF_NAMESPACE_ID::uint64 send() const;
  void set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send() const;
  void _internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 received = 7;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 latency = 8;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 round_trip = 9;
  bool has_round_trip() const;
  private:
  bool _internal_has_round_trip() const;
  public:
  void clear_round_trip();
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip() const;
  void set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_round_trip() const;
  void _internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VerkehrssituationFromServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::VerkehrssituationToServer* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 round_trip_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Durchschnittsgeschwindigkeit

// required bool accelerate = 1;
inline bool Durchschnittsgeschwindigkeit::_internal_has_accelerate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_accelerate() const {
  return _internal_has_accelerate();
}
inline void Durchschnittsgeschwindigkeit::clear_accelerate() {
  accelerate_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Durchschnittsgeschwindigkeit::_internal_accelerate() const {
  return accelerate_;
}
inline bool Durchschnittsgeschwindigkeit::accelerate() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.accelerate)
  return _internal_accelerate();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_accelerate(bool value) {
  _has_bits_[0] |= 0x00000200u;
  accelerate_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_accelerate(bool value) {
  _internal_set_accelerate(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.accelerate)
}

// required double acceleration = 2;
inline bool Durchschnittsgeschwindigkeit::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void Durchschnittsgeschwindigkeit::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Durchschnittsgeschwindigkeit::_internal_acceleration() const {
  return acceleration_;
}
inline double Durchschnittsgeschwindigkeit::acceleration() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.acceleration)
  return _internal_acceleration();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_acceleration(double value) {
  _has_bits_[0] |= 0x00000002u;
  acceleration_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.acceleration)
}

// required double average_speed = 3;
inline bool Durchschnittsgeschwindigkeit::_internal_has_average_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_average_speed() const {
  return _internal_has_average_speed();
}
inline void Durchschnittsgeschwindigkeit::clear_average_speed() {
  average_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Durchschnittsgeschwindigkeit::_internal_average_speed() const {
  return average_speed_;
}
inline double Durchschnittsgeschwindigkeit::average_speed() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.average_speed)
  return _internal_average_speed();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_average_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  average_speed_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_average_speed(double value) {
  _internal_set_average_speed(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.average_speed)
}

// required double breaking_force = 4;
inline bool Durchschnittsgeschwindigkeit::_internal_has_breaking_force() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_breaking_force() const {
  return _internal_has_breaking_force();
}
inline void Durchschnittsgeschwindigkeit::clear_breaking_force() {
  breaking_force_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Durchschnittsgeschwindigkeit::_internal_breaking_force() const {
  return breaking_force_;
}
inline double Durchschnittsgeschwindigkeit::breaking_force() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.breaking_force)
  return _internal_breaking_force();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_breaking_force(double value) {
  _has_bits_[0] |= 0x00000008u;
  breaking_force_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_breaking_force(double value) {
  _internal_set_breaking_force(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.breaking_force)
}

// required double distance = 5;
inline bool Durchschnittsgeschwindigkeit::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_distance() const {
  return _internal_has_distance();
}
inline void Durchschnittsgeschwindigkeit::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Durchschnittsgeschwindigkeit::_internal_distance() const {
  return distance_;
}
inline double Durchschnittsgeschwindigkeit::distance() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.distance)
  return _internal_distance();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000010u;
  distance_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.distance)
}

// required double min_speed = 6;
inline bool Durchschnittsgeschwindigkeit::_internal_has_min_speed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_min_speed() const {
  return _internal_has_min_speed();
}
inline void Durchschnittsgeschwindigkeit::clear_min_speed() {
  min_speed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Durchschnittsgeschwindigkeit::_internal_min_speed() const {
  return min_speed_;
}
inline double Durchschnittsgeschwindigkeit::min_speed() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.min_speed)
  return _internal_min_speed();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_min_speed(double value) {
  _has_bits_[0] |= 0x00000020u;
  min_speed_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_min_speed(double value) {
  _internal_set_min_speed(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.min_speed)
}

// required double max_speed = 7;
inline bool Durchschnittsgeschwindigkeit::_internal_has_max_speed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void Durchschnittsgeschwindigkeit::clear_max_speed() {
  max_speed_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Durchschnittsgeschwindigkeit::_internal_max_speed() const {
  return max_speed_;
}
inline double Durchschnittsgeschwindigkeit::max_speed() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.max_speed)
  return _internal_max_speed();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_max_speed(double value) {
  _has_bits_[0] |= 0x00000040u;
  max_speed_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.max_speed)
}

// required double speed = 8;
inline bool Durchschnittsgeschwindigkeit::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_speed() const {
  return _internal_has_speed();
}
inline void Durchschnittsgeschwindigkeit::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Durchschnittsgeschwindigkeit::_internal_speed() const {
  return speed_;
}
inline double Durchschnittsgeschwindigkeit::speed() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.speed)
  return _internal_speed();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000080u;
  speed_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.speed)
}

// required double start_time = 9;
inline bool Durchschnittsgeschwindigkeit::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_start_time() const {
  return _internal_has_start_time();
}
inline void Durchschnittsgeschwindigkeit::clear_start_time() {
  start_time_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Durchschnittsgeschwindigkeit::_internal_start_time() const {
  return start_time_;
}
inline double Durchschnittsgeschwindigkeit::start_time() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.start_time)
  return _internal_start_time();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_start_time(double value) {
  _has_bits_[0] |= 0x00000100u;
  start_time_ = value;
}
inline void Durchschnittsgeschwindigkeit::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.start_time)
}

// required string type = 10;
inline bool Durchschnittsgeschwindigkeit::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Durchschnittsgeschwindigkeit::has_type() const {
  return _internal_has_type();
}
inline void Durchschnittsgeschwindigkeit::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Durchschnittsgeschwindigkeit::type() const {
  // @@protoc_insertion_point(field_get:Durchschnittsgeschwindigkeit.type)
  return _internal_type();
}
inline void Durchschnittsgeschwindigkeit::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Durchschnittsgeschwindigkeit.type)
}
inline std::string* Durchschnittsgeschwindigkeit::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Durchschnittsgeschwindigkeit.type)
  return _internal_mutable_type();
}
inline const std::string& Durchschnittsgeschwindigkeit::_internal_type() const {
  return type_.Get();
}
inline void Durchschnittsgeschwindigkeit::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Durchschnittsgeschwindigkeit::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Durchschnittsgeschwindigkeit.type)
}
inline void Durchschnittsgeschwindigkeit::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Durchschnittsgeschwindigkeit.type)
}
inline void Durchschnittsgeschwindigkeit::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Durchschnittsgeschwindigkeit.type)
}
inline std::string* Durchschnittsgeschwindigkeit::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Durchschnittsgeschwindigkeit::release_type() {
  // @@protoc_insertion_point(field_release:Durchschnittsgeschwindigkeit.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Durchschnittsgeschwindigkeit::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Durchschnittsgeschwindigkeit.type)
}

// -------------------------------------------------------------------

// DurchschnittsgeschwindigkeitToHeadquarter

// required .Durchschnittsgeschwindigkeit data = 1;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_data() const {
  return _internal_has_data();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Durchschnittsgeschwindigkeit& DurchschnittsgeschwindigkeitToHeadquarter::_internal_data() const {
  const ::Durchschnittsgeschwindigkeit* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Durchschnittsgeschwindigkeit*>(
      &::_Durchschnittsgeschwindigkeit_default_instance_);
}
inline const ::Durchschnittsgeschwindigkeit& DurchschnittsgeschwindigkeitToHeadquarter::data() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.data)
  return _internal_data();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::unsafe_arena_set_allocated_data(
    ::Durchschnittsgeschwindigkeit* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DurchschnittsgeschwindigkeitToHeadquarter.data)
}
inline ::Durchschnittsgeschwindigkeit* DurchschnittsgeschwindigkeitToHeadquarter::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::Durchschnittsgeschwindigkeit* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Durchschnittsgeschwindigkeit* DurchschnittsgeschwindigkeitToHeadquarter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToHeadquarter.data)
  _has_bits_[0] &= ~0x00000004u;
  ::Durchschnittsgeschwindigkeit* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Durchschnittsgeschwindigkeit* DurchschnittsgeschwindigkeitToHeadquarter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Durchschnittsgeschwindigkeit>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Durchschnittsgeschwindigkeit* DurchschnittsgeschwindigkeitToHeadquarter::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToHeadquarter.data)
  return _internal_mutable_data();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_allocated_data(::Durchschnittsgeschwindigkeit* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToHeadquarter.data)
}

// optional string from_address = 2;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_from_address() const {
  return _internal_has_from_address();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DurchschnittsgeschwindigkeitToHeadquarter::from_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
  return _internal_from_address();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& DurchschnittsgeschwindigkeitToHeadquarter::_internal_from_address() const {
  return from_address_.Get();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::release_from_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToHeadquarter.from_address)
}

// optional int32 from_port = 3;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_from_port() const {
  return _internal_has_from_port();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToHeadquarter::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToHeadquarter::from_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.from_port)
  return _internal_from_port();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.from_port)
}

// optional string to_address = 4;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_to_address() const {
  return _internal_has_to_address();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DurchschnittsgeschwindigkeitToHeadquarter::to_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
  return _internal_to_address();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& DurchschnittsgeschwindigkeitToHeadquarter::_internal_to_address() const {
  return to_address_.Get();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitToHeadquarter::release_to_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToHeadquarter.to_address)
}

// optional int32 to_port = 5;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_to_port() const {
  return _internal_has_to_port();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToHeadquarter::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToHeadquarter::to_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.to_port)
  return _internal_to_port();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.to_port)
}

// required uint64 send = 6;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_send() const {
  return _internal_has_send();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::send() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.send)
  return _internal_send();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.send)
}

// optional uint64 received = 7;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_received() const {
  return _internal_has_received();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::received() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.received)
  return _internal_received();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.received)
}

// optional uint64 latency = 8;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_latency() const {
  return _internal_has_latency();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::latency() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.latency)
  return _internal_latency();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.latency)
}

// optional uint64 round_trip = 9;
inline bool DurchschnittsgeschwindigkeitToHeadquarter::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToHeadquarter::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToHeadquarter::round_trip() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToHeadquarter.round_trip)
  return _internal_round_trip();
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void DurchschnittsgeschwindigkeitToHeadquarter::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToHeadquarter.round_trip)
}

// -------------------------------------------------------------------

// DurchschnittsgeschwindigkeitToServer

// required .DurchschnittsgeschwindigkeitToHeadquarter data = 1;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_data() const {
  return _internal_has_data();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DurchschnittsgeschwindigkeitToHeadquarter& DurchschnittsgeschwindigkeitToServer::_internal_data() const {
  const ::DurchschnittsgeschwindigkeitToHeadquarter* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DurchschnittsgeschwindigkeitToHeadquarter*>(
      &::_DurchschnittsgeschwindigkeitToHeadquarter_default_instance_);
}
inline const ::DurchschnittsgeschwindigkeitToHeadquarter& DurchschnittsgeschwindigkeitToServer::data() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.data)
  return _internal_data();
}
inline void DurchschnittsgeschwindigkeitToServer::unsafe_arena_set_allocated_data(
    ::DurchschnittsgeschwindigkeitToHeadquarter* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DurchschnittsgeschwindigkeitToServer.data)
}
inline ::DurchschnittsgeschwindigkeitToHeadquarter* DurchschnittsgeschwindigkeitToServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::DurchschnittsgeschwindigkeitToHeadquarter* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DurchschnittsgeschwindigkeitToHeadquarter* DurchschnittsgeschwindigkeitToServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::DurchschnittsgeschwindigkeitToHeadquarter* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DurchschnittsgeschwindigkeitToHeadquarter* DurchschnittsgeschwindigkeitToServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DurchschnittsgeschwindigkeitToHeadquarter>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DurchschnittsgeschwindigkeitToHeadquarter* DurchschnittsgeschwindigkeitToServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToServer.data)
  return _internal_mutable_data();
}
inline void DurchschnittsgeschwindigkeitToServer::set_allocated_data(::DurchschnittsgeschwindigkeitToHeadquarter* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToServer.data)
}

// optional string from_address = 2;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DurchschnittsgeschwindigkeitToServer::from_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.from_address)
  return _internal_from_address();
}
inline void DurchschnittsgeschwindigkeitToServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitToServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& DurchschnittsgeschwindigkeitToServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitToServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitToServer.from_address)
}
inline void DurchschnittsgeschwindigkeitToServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitToServer.from_address)
}
inline void DurchschnittsgeschwindigkeitToServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitToServer.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitToServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitToServer::release_from_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitToServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToServer.from_address)
}

// optional int32 from_port = 3;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToServer::from_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.from_port)
  return _internal_from_port();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.from_port)
}

// optional string to_address = 4;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DurchschnittsgeschwindigkeitToServer::to_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.to_address)
  return _internal_to_address();
}
inline void DurchschnittsgeschwindigkeitToServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitToServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitToServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& DurchschnittsgeschwindigkeitToServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitToServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitToServer.to_address)
}
inline void DurchschnittsgeschwindigkeitToServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitToServer.to_address)
}
inline void DurchschnittsgeschwindigkeitToServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitToServer.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitToServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitToServer::release_to_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitToServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitToServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitToServer.to_address)
}

// optional int32 to_port = 5;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitToServer::to_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.to_port)
  return _internal_to_port();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.to_port)
}

// required uint64 send = 6;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_send() const {
  return _internal_has_send();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::send() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.send)
  return _internal_send();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.send)
}

// optional uint64 received = 7;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_received() const {
  return _internal_has_received();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::received() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.received)
  return _internal_received();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.received)
}

// optional uint64 latency = 8;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_latency() const {
  return _internal_has_latency();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::latency() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.latency)
  return _internal_latency();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.latency)
}

// optional uint64 round_trip = 9;
inline bool DurchschnittsgeschwindigkeitToServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitToServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void DurchschnittsgeschwindigkeitToServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitToServer::round_trip() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitToServer.round_trip)
  return _internal_round_trip();
}
inline void DurchschnittsgeschwindigkeitToServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void DurchschnittsgeschwindigkeitToServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitToServer.round_trip)
}

// -------------------------------------------------------------------

// DurchschnittsgeschwindigkeitFromServer

// required .DurchschnittsgeschwindigkeitToServer data = 1;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_data() const {
  return _internal_has_data();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DurchschnittsgeschwindigkeitToServer& DurchschnittsgeschwindigkeitFromServer::_internal_data() const {
  const ::DurchschnittsgeschwindigkeitToServer* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DurchschnittsgeschwindigkeitToServer*>(
      &::_DurchschnittsgeschwindigkeitToServer_default_instance_);
}
inline const ::DurchschnittsgeschwindigkeitToServer& DurchschnittsgeschwindigkeitFromServer::data() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.data)
  return _internal_data();
}
inline void DurchschnittsgeschwindigkeitFromServer::unsafe_arena_set_allocated_data(
    ::DurchschnittsgeschwindigkeitToServer* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DurchschnittsgeschwindigkeitFromServer.data)
}
inline ::DurchschnittsgeschwindigkeitToServer* DurchschnittsgeschwindigkeitFromServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::DurchschnittsgeschwindigkeitToServer* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DurchschnittsgeschwindigkeitToServer* DurchschnittsgeschwindigkeitFromServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitFromServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::DurchschnittsgeschwindigkeitToServer* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DurchschnittsgeschwindigkeitToServer* DurchschnittsgeschwindigkeitFromServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DurchschnittsgeschwindigkeitToServer>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DurchschnittsgeschwindigkeitToServer* DurchschnittsgeschwindigkeitFromServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitFromServer.data)
  return _internal_mutable_data();
}
inline void DurchschnittsgeschwindigkeitFromServer::set_allocated_data(::DurchschnittsgeschwindigkeitToServer* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitFromServer.data)
}

// optional string from_address = 2;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DurchschnittsgeschwindigkeitFromServer::from_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.from_address)
  return _internal_from_address();
}
inline void DurchschnittsgeschwindigkeitFromServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitFromServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& DurchschnittsgeschwindigkeitFromServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitFromServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitFromServer.from_address)
}
inline void DurchschnittsgeschwindigkeitFromServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitFromServer.from_address)
}
inline void DurchschnittsgeschwindigkeitFromServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitFromServer.from_address)
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::release_from_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitFromServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitFromServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitFromServer.from_address)
}

// optional int32 from_port = 3;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitFromServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitFromServer::from_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.from_port)
  return _internal_from_port();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.from_port)
}

// optional string to_address = 4;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DurchschnittsgeschwindigkeitFromServer::to_address() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.to_address)
  return _internal_to_address();
}
inline void DurchschnittsgeschwindigkeitFromServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:DurchschnittsgeschwindigkeitFromServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& DurchschnittsgeschwindigkeitFromServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DurchschnittsgeschwindigkeitFromServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DurchschnittsgeschwindigkeitFromServer.to_address)
}
inline void DurchschnittsgeschwindigkeitFromServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DurchschnittsgeschwindigkeitFromServer.to_address)
}
inline void DurchschnittsgeschwindigkeitFromServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DurchschnittsgeschwindigkeitFromServer.to_address)
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DurchschnittsgeschwindigkeitFromServer::release_to_address() {
  // @@protoc_insertion_point(field_release:DurchschnittsgeschwindigkeitFromServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DurchschnittsgeschwindigkeitFromServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DurchschnittsgeschwindigkeitFromServer.to_address)
}

// optional int32 to_port = 5;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitFromServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DurchschnittsgeschwindigkeitFromServer::to_port() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.to_port)
  return _internal_to_port();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.to_port)
}

// required uint64 send = 6;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_send() const {
  return _internal_has_send();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::send() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.send)
  return _internal_send();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.send)
}

// optional uint64 received = 7;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_received() const {
  return _internal_has_received();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::received() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.received)
  return _internal_received();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.received)
}

// optional uint64 latency = 8;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_latency() const {
  return _internal_has_latency();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::latency() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.latency)
  return _internal_latency();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.latency)
}

// optional uint64 round_trip = 9;
inline bool DurchschnittsgeschwindigkeitFromServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DurchschnittsgeschwindigkeitFromServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void DurchschnittsgeschwindigkeitFromServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DurchschnittsgeschwindigkeitFromServer::round_trip() const {
  // @@protoc_insertion_point(field_get:DurchschnittsgeschwindigkeitFromServer.round_trip)
  return _internal_round_trip();
}
inline void DurchschnittsgeschwindigkeitFromServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void DurchschnittsgeschwindigkeitFromServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:DurchschnittsgeschwindigkeitFromServer.round_trip)
}

// -------------------------------------------------------------------

// Fuellstand

// required double capacity = 1;
inline bool Fuellstand::_internal_has_capacity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fuellstand::has_capacity() const {
  return _internal_has_capacity();
}
inline void Fuellstand::clear_capacity() {
  capacity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Fuellstand::_internal_capacity() const {
  return capacity_;
}
inline double Fuellstand::capacity() const {
  // @@protoc_insertion_point(field_get:Fuellstand.capacity)
  return _internal_capacity();
}
inline void Fuellstand::_internal_set_capacity(double value) {
  _has_bits_[0] |= 0x00000002u;
  capacity_ = value;
}
inline void Fuellstand::set_capacity(double value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:Fuellstand.capacity)
}

// required double consumption = 2;
inline bool Fuellstand::_internal_has_consumption() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fuellstand::has_consumption() const {
  return _internal_has_consumption();
}
inline void Fuellstand::clear_consumption() {
  consumption_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Fuellstand::_internal_consumption() const {
  return consumption_;
}
inline double Fuellstand::consumption() const {
  // @@protoc_insertion_point(field_get:Fuellstand.consumption)
  return _internal_consumption();
}
inline void Fuellstand::_internal_set_consumption(double value) {
  _has_bits_[0] |= 0x00000004u;
  consumption_ = value;
}
inline void Fuellstand::set_consumption(double value) {
  _internal_set_consumption(value);
  // @@protoc_insertion_point(field_set:Fuellstand.consumption)
}

// required double current_capacity = 3;
inline bool Fuellstand::_internal_has_current_capacity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fuellstand::has_current_capacity() const {
  return _internal_has_current_capacity();
}
inline void Fuellstand::clear_current_capacity() {
  current_capacity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Fuellstand::_internal_current_capacity() const {
  return current_capacity_;
}
inline double Fuellstand::current_capacity() const {
  // @@protoc_insertion_point(field_get:Fuellstand.current_capacity)
  return _internal_current_capacity();
}
inline void Fuellstand::_internal_set_current_capacity(double value) {
  _has_bits_[0] |= 0x00000008u;
  current_capacity_ = value;
}
inline void Fuellstand::set_current_capacity(double value) {
  _internal_set_current_capacity(value);
  // @@protoc_insertion_point(field_set:Fuellstand.current_capacity)
}

// required double last_refueld = 4;
inline bool Fuellstand::_internal_has_last_refueld() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Fuellstand::has_last_refueld() const {
  return _internal_has_last_refueld();
}
inline void Fuellstand::clear_last_refueld() {
  last_refueld_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Fuellstand::_internal_last_refueld() const {
  return last_refueld_;
}
inline double Fuellstand::last_refueld() const {
  // @@protoc_insertion_point(field_get:Fuellstand.last_refueld)
  return _internal_last_refueld();
}
inline void Fuellstand::_internal_set_last_refueld(double value) {
  _has_bits_[0] |= 0x00000010u;
  last_refueld_ = value;
}
inline void Fuellstand::set_last_refueld(double value) {
  _internal_set_last_refueld(value);
  // @@protoc_insertion_point(field_set:Fuellstand.last_refueld)
}

// required double level = 5;
inline bool Fuellstand::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Fuellstand::has_level() const {
  return _internal_has_level();
}
inline void Fuellstand::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Fuellstand::_internal_level() const {
  return level_;
}
inline double Fuellstand::level() const {
  // @@protoc_insertion_point(field_get:Fuellstand.level)
  return _internal_level();
}
inline void Fuellstand::_internal_set_level(double value) {
  _has_bits_[0] |= 0x00000020u;
  level_ = value;
}
inline void Fuellstand::set_level(double value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Fuellstand.level)
}

// required double ussage = 6;
inline bool Fuellstand::_internal_has_ussage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Fuellstand::has_ussage() const {
  return _internal_has_ussage();
}
inline void Fuellstand::clear_ussage() {
  ussage_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Fuellstand::_internal_ussage() const {
  return ussage_;
}
inline double Fuellstand::ussage() const {
  // @@protoc_insertion_point(field_get:Fuellstand.ussage)
  return _internal_ussage();
}
inline void Fuellstand::_internal_set_ussage(double value) {
  _has_bits_[0] |= 0x00000040u;
  ussage_ = value;
}
inline void Fuellstand::set_ussage(double value) {
  _internal_set_ussage(value);
  // @@protoc_insertion_point(field_set:Fuellstand.ussage)
}

// required double will_refill = 7;
inline bool Fuellstand::_internal_has_will_refill() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Fuellstand::has_will_refill() const {
  return _internal_has_will_refill();
}
inline void Fuellstand::clear_will_refill() {
  will_refill_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Fuellstand::_internal_will_refill() const {
  return will_refill_;
}
inline double Fuellstand::will_refill() const {
  // @@protoc_insertion_point(field_get:Fuellstand.will_refill)
  return _internal_will_refill();
}
inline void Fuellstand::_internal_set_will_refill(double value) {
  _has_bits_[0] |= 0x00000080u;
  will_refill_ = value;
}
inline void Fuellstand::set_will_refill(double value) {
  _internal_set_will_refill(value);
  // @@protoc_insertion_point(field_set:Fuellstand.will_refill)
}

// required string type = 8;
inline bool Fuellstand::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fuellstand::has_type() const {
  return _internal_has_type();
}
inline void Fuellstand::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Fuellstand::type() const {
  // @@protoc_insertion_point(field_get:Fuellstand.type)
  return _internal_type();
}
inline void Fuellstand::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Fuellstand.type)
}
inline std::string* Fuellstand::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Fuellstand.type)
  return _internal_mutable_type();
}
inline const std::string& Fuellstand::_internal_type() const {
  return type_.Get();
}
inline void Fuellstand::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fuellstand::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Fuellstand.type)
}
inline void Fuellstand::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Fuellstand.type)
}
inline void Fuellstand::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Fuellstand.type)
}
inline std::string* Fuellstand::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fuellstand::release_type() {
  // @@protoc_insertion_point(field_release:Fuellstand.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fuellstand::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Fuellstand.type)
}

// -------------------------------------------------------------------

// FuellstandToHeadquarter

// required .Fuellstand data = 1;
inline bool FuellstandToHeadquarter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool FuellstandToHeadquarter::has_data() const {
  return _internal_has_data();
}
inline void FuellstandToHeadquarter::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Fuellstand& FuellstandToHeadquarter::_internal_data() const {
  const ::Fuellstand* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Fuellstand*>(
      &::_Fuellstand_default_instance_);
}
inline const ::Fuellstand& FuellstandToHeadquarter::data() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.data)
  return _internal_data();
}
inline void FuellstandToHeadquarter::unsafe_arena_set_allocated_data(
    ::Fuellstand* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FuellstandToHeadquarter.data)
}
inline ::Fuellstand* FuellstandToHeadquarter::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::Fuellstand* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Fuellstand* FuellstandToHeadquarter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:FuellstandToHeadquarter.data)
  _has_bits_[0] &= ~0x00000004u;
  ::Fuellstand* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Fuellstand* FuellstandToHeadquarter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Fuellstand>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Fuellstand* FuellstandToHeadquarter::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FuellstandToHeadquarter.data)
  return _internal_mutable_data();
}
inline void FuellstandToHeadquarter::set_allocated_data(::Fuellstand* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:FuellstandToHeadquarter.data)
}

// optional string from_address = 2;
inline bool FuellstandToHeadquarter::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_from_address() const {
  return _internal_has_from_address();
}
inline void FuellstandToHeadquarter::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FuellstandToHeadquarter::from_address() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.from_address)
  return _internal_from_address();
}
inline void FuellstandToHeadquarter::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.from_address)
}
inline std::string* FuellstandToHeadquarter::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandToHeadquarter.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& FuellstandToHeadquarter::_internal_from_address() const {
  return from_address_.Get();
}
inline void FuellstandToHeadquarter::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandToHeadquarter::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandToHeadquarter.from_address)
}
inline void FuellstandToHeadquarter::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandToHeadquarter.from_address)
}
inline void FuellstandToHeadquarter::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandToHeadquarter.from_address)
}
inline std::string* FuellstandToHeadquarter::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandToHeadquarter::release_from_address() {
  // @@protoc_insertion_point(field_release:FuellstandToHeadquarter.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandToHeadquarter::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandToHeadquarter.from_address)
}

// optional int32 from_port = 3;
inline bool FuellstandToHeadquarter::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_from_port() const {
  return _internal_has_from_port();
}
inline void FuellstandToHeadquarter::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToHeadquarter::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToHeadquarter::from_port() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.from_port)
  return _internal_from_port();
}
inline void FuellstandToHeadquarter::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void FuellstandToHeadquarter::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.from_port)
}

// optional string to_address = 4;
inline bool FuellstandToHeadquarter::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_to_address() const {
  return _internal_has_to_address();
}
inline void FuellstandToHeadquarter::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FuellstandToHeadquarter::to_address() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.to_address)
  return _internal_to_address();
}
inline void FuellstandToHeadquarter::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.to_address)
}
inline std::string* FuellstandToHeadquarter::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandToHeadquarter.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& FuellstandToHeadquarter::_internal_to_address() const {
  return to_address_.Get();
}
inline void FuellstandToHeadquarter::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandToHeadquarter::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandToHeadquarter.to_address)
}
inline void FuellstandToHeadquarter::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandToHeadquarter.to_address)
}
inline void FuellstandToHeadquarter::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandToHeadquarter.to_address)
}
inline std::string* FuellstandToHeadquarter::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandToHeadquarter::release_to_address() {
  // @@protoc_insertion_point(field_release:FuellstandToHeadquarter.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandToHeadquarter::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandToHeadquarter.to_address)
}

// optional int32 to_port = 5;
inline bool FuellstandToHeadquarter::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_to_port() const {
  return _internal_has_to_port();
}
inline void FuellstandToHeadquarter::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToHeadquarter::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToHeadquarter::to_port() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.to_port)
  return _internal_to_port();
}
inline void FuellstandToHeadquarter::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void FuellstandToHeadquarter::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.to_port)
}

// required uint64 send = 6;
inline bool FuellstandToHeadquarter::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_send() const {
  return _internal_has_send();
}
inline void FuellstandToHeadquarter::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::send() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.send)
  return _internal_send();
}
inline void FuellstandToHeadquarter::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void FuellstandToHeadquarter::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.send)
}

// optional uint64 received = 7;
inline bool FuellstandToHeadquarter::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_received() const {
  return _internal_has_received();
}
inline void FuellstandToHeadquarter::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::received() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.received)
  return _internal_received();
}
inline void FuellstandToHeadquarter::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void FuellstandToHeadquarter::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.received)
}

// optional uint64 latency = 8;
inline bool FuellstandToHeadquarter::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_latency() const {
  return _internal_has_latency();
}
inline void FuellstandToHeadquarter::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::latency() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.latency)
  return _internal_latency();
}
inline void FuellstandToHeadquarter::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void FuellstandToHeadquarter::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.latency)
}

// optional uint64 round_trip = 9;
inline bool FuellstandToHeadquarter::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FuellstandToHeadquarter::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void FuellstandToHeadquarter::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToHeadquarter::round_trip() const {
  // @@protoc_insertion_point(field_get:FuellstandToHeadquarter.round_trip)
  return _internal_round_trip();
}
inline void FuellstandToHeadquarter::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void FuellstandToHeadquarter::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:FuellstandToHeadquarter.round_trip)
}

// -------------------------------------------------------------------

// FuellstandToServer

// required .FuellstandToHeadquarter data = 1;
inline bool FuellstandToServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool FuellstandToServer::has_data() const {
  return _internal_has_data();
}
inline void FuellstandToServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FuellstandToHeadquarter& FuellstandToServer::_internal_data() const {
  const ::FuellstandToHeadquarter* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FuellstandToHeadquarter*>(
      &::_FuellstandToHeadquarter_default_instance_);
}
inline const ::FuellstandToHeadquarter& FuellstandToServer::data() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.data)
  return _internal_data();
}
inline void FuellstandToServer::unsafe_arena_set_allocated_data(
    ::FuellstandToHeadquarter* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FuellstandToServer.data)
}
inline ::FuellstandToHeadquarter* FuellstandToServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::FuellstandToHeadquarter* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FuellstandToHeadquarter* FuellstandToServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:FuellstandToServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::FuellstandToHeadquarter* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::FuellstandToHeadquarter* FuellstandToServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::FuellstandToHeadquarter>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::FuellstandToHeadquarter* FuellstandToServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FuellstandToServer.data)
  return _internal_mutable_data();
}
inline void FuellstandToServer::set_allocated_data(::FuellstandToHeadquarter* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:FuellstandToServer.data)
}

// optional string from_address = 2;
inline bool FuellstandToServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FuellstandToServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void FuellstandToServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FuellstandToServer::from_address() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.from_address)
  return _internal_from_address();
}
inline void FuellstandToServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.from_address)
}
inline std::string* FuellstandToServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandToServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& FuellstandToServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void FuellstandToServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandToServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandToServer.from_address)
}
inline void FuellstandToServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandToServer.from_address)
}
inline void FuellstandToServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandToServer.from_address)
}
inline std::string* FuellstandToServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandToServer::release_from_address() {
  // @@protoc_insertion_point(field_release:FuellstandToServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandToServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandToServer.from_address)
}

// optional int32 from_port = 3;
inline bool FuellstandToServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FuellstandToServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void FuellstandToServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToServer::from_port() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.from_port)
  return _internal_from_port();
}
inline void FuellstandToServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void FuellstandToServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.from_port)
}

// optional string to_address = 4;
inline bool FuellstandToServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FuellstandToServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void FuellstandToServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FuellstandToServer::to_address() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.to_address)
  return _internal_to_address();
}
inline void FuellstandToServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.to_address)
}
inline std::string* FuellstandToServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandToServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& FuellstandToServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void FuellstandToServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandToServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandToServer.to_address)
}
inline void FuellstandToServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandToServer.to_address)
}
inline void FuellstandToServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandToServer.to_address)
}
inline std::string* FuellstandToServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandToServer::release_to_address() {
  // @@protoc_insertion_point(field_release:FuellstandToServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandToServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandToServer.to_address)
}

// optional int32 to_port = 5;
inline bool FuellstandToServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FuellstandToServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void FuellstandToServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandToServer::to_port() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.to_port)
  return _internal_to_port();
}
inline void FuellstandToServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void FuellstandToServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.to_port)
}

// required uint64 send = 6;
inline bool FuellstandToServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FuellstandToServer::has_send() const {
  return _internal_has_send();
}
inline void FuellstandToServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::send() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.send)
  return _internal_send();
}
inline void FuellstandToServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void FuellstandToServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.send)
}

// optional uint64 received = 7;
inline bool FuellstandToServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FuellstandToServer::has_received() const {
  return _internal_has_received();
}
inline void FuellstandToServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::received() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.received)
  return _internal_received();
}
inline void FuellstandToServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void FuellstandToServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.received)
}

// optional uint64 latency = 8;
inline bool FuellstandToServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FuellstandToServer::has_latency() const {
  return _internal_has_latency();
}
inline void FuellstandToServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::latency() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.latency)
  return _internal_latency();
}
inline void FuellstandToServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void FuellstandToServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.latency)
}

// optional uint64 round_trip = 9;
inline bool FuellstandToServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FuellstandToServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void FuellstandToServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandToServer::round_trip() const {
  // @@protoc_insertion_point(field_get:FuellstandToServer.round_trip)
  return _internal_round_trip();
}
inline void FuellstandToServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void FuellstandToServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:FuellstandToServer.round_trip)
}

// -------------------------------------------------------------------

// FuellstandFromServer

// required .FuellstandToServer data = 1;
inline bool FuellstandFromServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool FuellstandFromServer::has_data() const {
  return _internal_has_data();
}
inline void FuellstandFromServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FuellstandToServer& FuellstandFromServer::_internal_data() const {
  const ::FuellstandToServer* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FuellstandToServer*>(
      &::_FuellstandToServer_default_instance_);
}
inline const ::FuellstandToServer& FuellstandFromServer::data() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.data)
  return _internal_data();
}
inline void FuellstandFromServer::unsafe_arena_set_allocated_data(
    ::FuellstandToServer* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FuellstandFromServer.data)
}
inline ::FuellstandToServer* FuellstandFromServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::FuellstandToServer* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FuellstandToServer* FuellstandFromServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:FuellstandFromServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::FuellstandToServer* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::FuellstandToServer* FuellstandFromServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::FuellstandToServer>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::FuellstandToServer* FuellstandFromServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FuellstandFromServer.data)
  return _internal_mutable_data();
}
inline void FuellstandFromServer::set_allocated_data(::FuellstandToServer* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:FuellstandFromServer.data)
}

// optional string from_address = 2;
inline bool FuellstandFromServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void FuellstandFromServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FuellstandFromServer::from_address() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.from_address)
  return _internal_from_address();
}
inline void FuellstandFromServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.from_address)
}
inline std::string* FuellstandFromServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandFromServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& FuellstandFromServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void FuellstandFromServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandFromServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandFromServer.from_address)
}
inline void FuellstandFromServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandFromServer.from_address)
}
inline void FuellstandFromServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandFromServer.from_address)
}
inline std::string* FuellstandFromServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandFromServer::release_from_address() {
  // @@protoc_insertion_point(field_release:FuellstandFromServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandFromServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandFromServer.from_address)
}

// optional int32 from_port = 3;
inline bool FuellstandFromServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void FuellstandFromServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandFromServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandFromServer::from_port() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.from_port)
  return _internal_from_port();
}
inline void FuellstandFromServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void FuellstandFromServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.from_port)
}

// optional string to_address = 4;
inline bool FuellstandFromServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void FuellstandFromServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FuellstandFromServer::to_address() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.to_address)
  return _internal_to_address();
}
inline void FuellstandFromServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.to_address)
}
inline std::string* FuellstandFromServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:FuellstandFromServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& FuellstandFromServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void FuellstandFromServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FuellstandFromServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FuellstandFromServer.to_address)
}
inline void FuellstandFromServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FuellstandFromServer.to_address)
}
inline void FuellstandFromServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FuellstandFromServer.to_address)
}
inline std::string* FuellstandFromServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FuellstandFromServer::release_to_address() {
  // @@protoc_insertion_point(field_release:FuellstandFromServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuellstandFromServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FuellstandFromServer.to_address)
}

// optional int32 to_port = 5;
inline bool FuellstandFromServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void FuellstandFromServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandFromServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FuellstandFromServer::to_port() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.to_port)
  return _internal_to_port();
}
inline void FuellstandFromServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void FuellstandFromServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.to_port)
}

// required uint64 send = 6;
inline bool FuellstandFromServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_send() const {
  return _internal_has_send();
}
inline void FuellstandFromServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::send() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.send)
  return _internal_send();
}
inline void FuellstandFromServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void FuellstandFromServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.send)
}

// optional uint64 received = 7;
inline bool FuellstandFromServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_received() const {
  return _internal_has_received();
}
inline void FuellstandFromServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::received() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.received)
  return _internal_received();
}
inline void FuellstandFromServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void FuellstandFromServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.received)
}

// optional uint64 latency = 8;
inline bool FuellstandFromServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_latency() const {
  return _internal_has_latency();
}
inline void FuellstandFromServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::latency() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.latency)
  return _internal_latency();
}
inline void FuellstandFromServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void FuellstandFromServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.latency)
}

// optional uint64 round_trip = 9;
inline bool FuellstandFromServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FuellstandFromServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void FuellstandFromServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FuellstandFromServer::round_trip() const {
  // @@protoc_insertion_point(field_get:FuellstandFromServer.round_trip)
  return _internal_round_trip();
}
inline void FuellstandFromServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void FuellstandFromServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:FuellstandFromServer.round_trip)
}

// -------------------------------------------------------------------

// Kilometerstand

// required double mileage = 1;
inline bool Kilometerstand::_internal_has_mileage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Kilometerstand::has_mileage() const {
  return _internal_has_mileage();
}
inline void Kilometerstand::clear_mileage() {
  mileage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Kilometerstand::_internal_mileage() const {
  return mileage_;
}
inline double Kilometerstand::mileage() const {
  // @@protoc_insertion_point(field_get:Kilometerstand.mileage)
  return _internal_mileage();
}
inline void Kilometerstand::_internal_set_mileage(double value) {
  _has_bits_[0] |= 0x00000002u;
  mileage_ = value;
}
inline void Kilometerstand::set_mileage(double value) {
  _internal_set_mileage(value);
  // @@protoc_insertion_point(field_set:Kilometerstand.mileage)
}

// required string type = 2;
inline bool Kilometerstand::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Kilometerstand::has_type() const {
  return _internal_has_type();
}
inline void Kilometerstand::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Kilometerstand::type() const {
  // @@protoc_insertion_point(field_get:Kilometerstand.type)
  return _internal_type();
}
inline void Kilometerstand::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Kilometerstand.type)
}
inline std::string* Kilometerstand::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Kilometerstand.type)
  return _internal_mutable_type();
}
inline const std::string& Kilometerstand::_internal_type() const {
  return type_.Get();
}
inline void Kilometerstand::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Kilometerstand::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kilometerstand.type)
}
inline void Kilometerstand::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kilometerstand.type)
}
inline void Kilometerstand::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kilometerstand.type)
}
inline std::string* Kilometerstand::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Kilometerstand::release_type() {
  // @@protoc_insertion_point(field_release:Kilometerstand.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kilometerstand::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kilometerstand.type)
}

// -------------------------------------------------------------------

// KilometerstandToHeadquarter

// required .Kilometerstand data = 1;
inline bool KilometerstandToHeadquarter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool KilometerstandToHeadquarter::has_data() const {
  return _internal_has_data();
}
inline void KilometerstandToHeadquarter::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Kilometerstand& KilometerstandToHeadquarter::_internal_data() const {
  const ::Kilometerstand* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kilometerstand*>(
      &::_Kilometerstand_default_instance_);
}
inline const ::Kilometerstand& KilometerstandToHeadquarter::data() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.data)
  return _internal_data();
}
inline void KilometerstandToHeadquarter::unsafe_arena_set_allocated_data(
    ::Kilometerstand* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KilometerstandToHeadquarter.data)
}
inline ::Kilometerstand* KilometerstandToHeadquarter::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::Kilometerstand* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kilometerstand* KilometerstandToHeadquarter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KilometerstandToHeadquarter.data)
  _has_bits_[0] &= ~0x00000004u;
  ::Kilometerstand* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Kilometerstand* KilometerstandToHeadquarter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kilometerstand>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Kilometerstand* KilometerstandToHeadquarter::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToHeadquarter.data)
  return _internal_mutable_data();
}
inline void KilometerstandToHeadquarter::set_allocated_data(::Kilometerstand* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToHeadquarter.data)
}

// optional string from_address = 2;
inline bool KilometerstandToHeadquarter::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_from_address() const {
  return _internal_has_from_address();
}
inline void KilometerstandToHeadquarter::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KilometerstandToHeadquarter::from_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.from_address)
  return _internal_from_address();
}
inline void KilometerstandToHeadquarter::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.from_address)
}
inline std::string* KilometerstandToHeadquarter::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToHeadquarter.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& KilometerstandToHeadquarter::_internal_from_address() const {
  return from_address_.Get();
}
inline void KilometerstandToHeadquarter::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandToHeadquarter::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandToHeadquarter.from_address)
}
inline void KilometerstandToHeadquarter::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandToHeadquarter.from_address)
}
inline void KilometerstandToHeadquarter::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandToHeadquarter.from_address)
}
inline std::string* KilometerstandToHeadquarter::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandToHeadquarter::release_from_address() {
  // @@protoc_insertion_point(field_release:KilometerstandToHeadquarter.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandToHeadquarter::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToHeadquarter.from_address)
}

// optional int32 from_port = 3;
inline bool KilometerstandToHeadquarter::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_from_port() const {
  return _internal_has_from_port();
}
inline void KilometerstandToHeadquarter::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToHeadquarter::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToHeadquarter::from_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.from_port)
  return _internal_from_port();
}
inline void KilometerstandToHeadquarter::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void KilometerstandToHeadquarter::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.from_port)
}

// optional string to_address = 4;
inline bool KilometerstandToHeadquarter::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_to_address() const {
  return _internal_has_to_address();
}
inline void KilometerstandToHeadquarter::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KilometerstandToHeadquarter::to_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.to_address)
  return _internal_to_address();
}
inline void KilometerstandToHeadquarter::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.to_address)
}
inline std::string* KilometerstandToHeadquarter::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToHeadquarter.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& KilometerstandToHeadquarter::_internal_to_address() const {
  return to_address_.Get();
}
inline void KilometerstandToHeadquarter::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandToHeadquarter::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandToHeadquarter.to_address)
}
inline void KilometerstandToHeadquarter::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandToHeadquarter.to_address)
}
inline void KilometerstandToHeadquarter::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandToHeadquarter.to_address)
}
inline std::string* KilometerstandToHeadquarter::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandToHeadquarter::release_to_address() {
  // @@protoc_insertion_point(field_release:KilometerstandToHeadquarter.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandToHeadquarter::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToHeadquarter.to_address)
}

// optional int32 to_port = 5;
inline bool KilometerstandToHeadquarter::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_to_port() const {
  return _internal_has_to_port();
}
inline void KilometerstandToHeadquarter::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToHeadquarter::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToHeadquarter::to_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.to_port)
  return _internal_to_port();
}
inline void KilometerstandToHeadquarter::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void KilometerstandToHeadquarter::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.to_port)
}

// required uint64 send = 6;
inline bool KilometerstandToHeadquarter::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_send() const {
  return _internal_has_send();
}
inline void KilometerstandToHeadquarter::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::send() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.send)
  return _internal_send();
}
inline void KilometerstandToHeadquarter::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void KilometerstandToHeadquarter::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.send)
}

// optional uint64 received = 7;
inline bool KilometerstandToHeadquarter::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_received() const {
  return _internal_has_received();
}
inline void KilometerstandToHeadquarter::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::received() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.received)
  return _internal_received();
}
inline void KilometerstandToHeadquarter::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void KilometerstandToHeadquarter::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.received)
}

// optional uint64 latency = 8;
inline bool KilometerstandToHeadquarter::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_latency() const {
  return _internal_has_latency();
}
inline void KilometerstandToHeadquarter::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::latency() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.latency)
  return _internal_latency();
}
inline void KilometerstandToHeadquarter::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void KilometerstandToHeadquarter::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.latency)
}

// optional uint64 round_trip = 9;
inline bool KilometerstandToHeadquarter::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KilometerstandToHeadquarter::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void KilometerstandToHeadquarter::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToHeadquarter::round_trip() const {
  // @@protoc_insertion_point(field_get:KilometerstandToHeadquarter.round_trip)
  return _internal_round_trip();
}
inline void KilometerstandToHeadquarter::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void KilometerstandToHeadquarter::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:KilometerstandToHeadquarter.round_trip)
}

// -------------------------------------------------------------------

// KilometerstandToServer

// required .KilometerstandToHeadquarter data = 1;
inline bool KilometerstandToServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool KilometerstandToServer::has_data() const {
  return _internal_has_data();
}
inline void KilometerstandToServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KilometerstandToHeadquarter& KilometerstandToServer::_internal_data() const {
  const ::KilometerstandToHeadquarter* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::KilometerstandToHeadquarter*>(
      &::_KilometerstandToHeadquarter_default_instance_);
}
inline const ::KilometerstandToHeadquarter& KilometerstandToServer::data() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.data)
  return _internal_data();
}
inline void KilometerstandToServer::unsafe_arena_set_allocated_data(
    ::KilometerstandToHeadquarter* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KilometerstandToServer.data)
}
inline ::KilometerstandToHeadquarter* KilometerstandToServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::KilometerstandToHeadquarter* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KilometerstandToHeadquarter* KilometerstandToServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KilometerstandToServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::KilometerstandToHeadquarter* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KilometerstandToHeadquarter* KilometerstandToServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KilometerstandToHeadquarter>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::KilometerstandToHeadquarter* KilometerstandToServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToServer.data)
  return _internal_mutable_data();
}
inline void KilometerstandToServer::set_allocated_data(::KilometerstandToHeadquarter* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToServer.data)
}

// optional string from_address = 2;
inline bool KilometerstandToServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void KilometerstandToServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KilometerstandToServer::from_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.from_address)
  return _internal_from_address();
}
inline void KilometerstandToServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.from_address)
}
inline std::string* KilometerstandToServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& KilometerstandToServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void KilometerstandToServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandToServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandToServer.from_address)
}
inline void KilometerstandToServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandToServer.from_address)
}
inline void KilometerstandToServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandToServer.from_address)
}
inline std::string* KilometerstandToServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandToServer::release_from_address() {
  // @@protoc_insertion_point(field_release:KilometerstandToServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandToServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToServer.from_address)
}

// optional int32 from_port = 3;
inline bool KilometerstandToServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void KilometerstandToServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToServer::from_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.from_port)
  return _internal_from_port();
}
inline void KilometerstandToServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void KilometerstandToServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.from_port)
}

// optional string to_address = 4;
inline bool KilometerstandToServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void KilometerstandToServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KilometerstandToServer::to_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.to_address)
  return _internal_to_address();
}
inline void KilometerstandToServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.to_address)
}
inline std::string* KilometerstandToServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandToServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& KilometerstandToServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void KilometerstandToServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandToServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandToServer.to_address)
}
inline void KilometerstandToServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandToServer.to_address)
}
inline void KilometerstandToServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandToServer.to_address)
}
inline std::string* KilometerstandToServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandToServer::release_to_address() {
  // @@protoc_insertion_point(field_release:KilometerstandToServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandToServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandToServer.to_address)
}

// optional int32 to_port = 5;
inline bool KilometerstandToServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void KilometerstandToServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandToServer::to_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.to_port)
  return _internal_to_port();
}
inline void KilometerstandToServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void KilometerstandToServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.to_port)
}

// required uint64 send = 6;
inline bool KilometerstandToServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_send() const {
  return _internal_has_send();
}
inline void KilometerstandToServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::send() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.send)
  return _internal_send();
}
inline void KilometerstandToServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void KilometerstandToServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.send)
}

// optional uint64 received = 7;
inline bool KilometerstandToServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_received() const {
  return _internal_has_received();
}
inline void KilometerstandToServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::received() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.received)
  return _internal_received();
}
inline void KilometerstandToServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void KilometerstandToServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.received)
}

// optional uint64 latency = 8;
inline bool KilometerstandToServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_latency() const {
  return _internal_has_latency();
}
inline void KilometerstandToServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::latency() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.latency)
  return _internal_latency();
}
inline void KilometerstandToServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void KilometerstandToServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.latency)
}

// optional uint64 round_trip = 9;
inline bool KilometerstandToServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KilometerstandToServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void KilometerstandToServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandToServer::round_trip() const {
  // @@protoc_insertion_point(field_get:KilometerstandToServer.round_trip)
  return _internal_round_trip();
}
inline void KilometerstandToServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void KilometerstandToServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:KilometerstandToServer.round_trip)
}

// -------------------------------------------------------------------

// KilometerstandFromServer

// required .KilometerstandToServer data = 1;
inline bool KilometerstandFromServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool KilometerstandFromServer::has_data() const {
  return _internal_has_data();
}
inline void KilometerstandFromServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KilometerstandToServer& KilometerstandFromServer::_internal_data() const {
  const ::KilometerstandToServer* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::KilometerstandToServer*>(
      &::_KilometerstandToServer_default_instance_);
}
inline const ::KilometerstandToServer& KilometerstandFromServer::data() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.data)
  return _internal_data();
}
inline void KilometerstandFromServer::unsafe_arena_set_allocated_data(
    ::KilometerstandToServer* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KilometerstandFromServer.data)
}
inline ::KilometerstandToServer* KilometerstandFromServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::KilometerstandToServer* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KilometerstandToServer* KilometerstandFromServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KilometerstandFromServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::KilometerstandToServer* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KilometerstandToServer* KilometerstandFromServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KilometerstandToServer>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::KilometerstandToServer* KilometerstandFromServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KilometerstandFromServer.data)
  return _internal_mutable_data();
}
inline void KilometerstandFromServer::set_allocated_data(::KilometerstandToServer* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KilometerstandFromServer.data)
}

// optional string from_address = 2;
inline bool KilometerstandFromServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void KilometerstandFromServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KilometerstandFromServer::from_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.from_address)
  return _internal_from_address();
}
inline void KilometerstandFromServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.from_address)
}
inline std::string* KilometerstandFromServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandFromServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& KilometerstandFromServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void KilometerstandFromServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandFromServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandFromServer.from_address)
}
inline void KilometerstandFromServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandFromServer.from_address)
}
inline void KilometerstandFromServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandFromServer.from_address)
}
inline std::string* KilometerstandFromServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandFromServer::release_from_address() {
  // @@protoc_insertion_point(field_release:KilometerstandFromServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandFromServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandFromServer.from_address)
}

// optional int32 from_port = 3;
inline bool KilometerstandFromServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void KilometerstandFromServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandFromServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandFromServer::from_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.from_port)
  return _internal_from_port();
}
inline void KilometerstandFromServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void KilometerstandFromServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.from_port)
}

// optional string to_address = 4;
inline bool KilometerstandFromServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void KilometerstandFromServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KilometerstandFromServer::to_address() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.to_address)
  return _internal_to_address();
}
inline void KilometerstandFromServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.to_address)
}
inline std::string* KilometerstandFromServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:KilometerstandFromServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& KilometerstandFromServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void KilometerstandFromServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KilometerstandFromServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KilometerstandFromServer.to_address)
}
inline void KilometerstandFromServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:KilometerstandFromServer.to_address)
}
inline void KilometerstandFromServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KilometerstandFromServer.to_address)
}
inline std::string* KilometerstandFromServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KilometerstandFromServer::release_to_address() {
  // @@protoc_insertion_point(field_release:KilometerstandFromServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KilometerstandFromServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KilometerstandFromServer.to_address)
}

// optional int32 to_port = 5;
inline bool KilometerstandFromServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void KilometerstandFromServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandFromServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KilometerstandFromServer::to_port() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.to_port)
  return _internal_to_port();
}
inline void KilometerstandFromServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void KilometerstandFromServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.to_port)
}

// required uint64 send = 6;
inline bool KilometerstandFromServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_send() const {
  return _internal_has_send();
}
inline void KilometerstandFromServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::send() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.send)
  return _internal_send();
}
inline void KilometerstandFromServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void KilometerstandFromServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.send)
}

// optional uint64 received = 7;
inline bool KilometerstandFromServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_received() const {
  return _internal_has_received();
}
inline void KilometerstandFromServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::received() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.received)
  return _internal_received();
}
inline void KilometerstandFromServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void KilometerstandFromServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.received)
}

// optional uint64 latency = 8;
inline bool KilometerstandFromServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_latency() const {
  return _internal_has_latency();
}
inline void KilometerstandFromServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::latency() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.latency)
  return _internal_latency();
}
inline void KilometerstandFromServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void KilometerstandFromServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.latency)
}

// optional uint64 round_trip = 9;
inline bool KilometerstandFromServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KilometerstandFromServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void KilometerstandFromServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KilometerstandFromServer::round_trip() const {
  // @@protoc_insertion_point(field_get:KilometerstandFromServer.round_trip)
  return _internal_round_trip();
}
inline void KilometerstandFromServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void KilometerstandFromServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:KilometerstandFromServer.round_trip)
}

// -------------------------------------------------------------------

// Verkehrssituation

// required double numeric_value = 1;
inline bool Verkehrssituation::_internal_has_numeric_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Verkehrssituation::has_numeric_value() const {
  return _internal_has_numeric_value();
}
inline void Verkehrssituation::clear_numeric_value() {
  numeric_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Verkehrssituation::_internal_numeric_value() const {
  return numeric_value_;
}
inline double Verkehrssituation::numeric_value() const {
  // @@protoc_insertion_point(field_get:Verkehrssituation.numeric_value)
  return _internal_numeric_value();
}
inline void Verkehrssituation::_internal_set_numeric_value(double value) {
  _has_bits_[0] |= 0x00000004u;
  numeric_value_ = value;
}
inline void Verkehrssituation::set_numeric_value(double value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:Verkehrssituation.numeric_value)
}

// required bool rising = 2;
inline bool Verkehrssituation::_internal_has_rising() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Verkehrssituation::has_rising() const {
  return _internal_has_rising();
}
inline void Verkehrssituation::clear_rising() {
  rising_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Verkehrssituation::_internal_rising() const {
  return rising_;
}
inline bool Verkehrssituation::rising() const {
  // @@protoc_insertion_point(field_get:Verkehrssituation.rising)
  return _internal_rising();
}
inline void Verkehrssituation::_internal_set_rising(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rising_ = value;
}
inline void Verkehrssituation::set_rising(bool value) {
  _internal_set_rising(value);
  // @@protoc_insertion_point(field_set:Verkehrssituation.rising)
}

// required string value = 3;
inline bool Verkehrssituation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Verkehrssituation::has_value() const {
  return _internal_has_value();
}
inline void Verkehrssituation::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Verkehrssituation::value() const {
  // @@protoc_insertion_point(field_get:Verkehrssituation.value)
  return _internal_value();
}
inline void Verkehrssituation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Verkehrssituation.value)
}
inline std::string* Verkehrssituation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Verkehrssituation.value)
  return _internal_mutable_value();
}
inline const std::string& Verkehrssituation::_internal_value() const {
  return value_.Get();
}
inline void Verkehrssituation::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Verkehrssituation::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Verkehrssituation.value)
}
inline void Verkehrssituation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Verkehrssituation.value)
}
inline void Verkehrssituation::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Verkehrssituation.value)
}
inline std::string* Verkehrssituation::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Verkehrssituation::release_value() {
  // @@protoc_insertion_point(field_release:Verkehrssituation.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Verkehrssituation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Verkehrssituation.value)
}

// required string type = 4;
inline bool Verkehrssituation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Verkehrssituation::has_type() const {
  return _internal_has_type();
}
inline void Verkehrssituation::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Verkehrssituation::type() const {
  // @@protoc_insertion_point(field_get:Verkehrssituation.type)
  return _internal_type();
}
inline void Verkehrssituation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Verkehrssituation.type)
}
inline std::string* Verkehrssituation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Verkehrssituation.type)
  return _internal_mutable_type();
}
inline const std::string& Verkehrssituation::_internal_type() const {
  return type_.Get();
}
inline void Verkehrssituation::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Verkehrssituation::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Verkehrssituation.type)
}
inline void Verkehrssituation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Verkehrssituation.type)
}
inline void Verkehrssituation::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Verkehrssituation.type)
}
inline std::string* Verkehrssituation::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Verkehrssituation::release_type() {
  // @@protoc_insertion_point(field_release:Verkehrssituation.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Verkehrssituation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Verkehrssituation.type)
}

// -------------------------------------------------------------------

// VerkehrssituationToHeadquarter

// required .Verkehrssituation data = 1;
inline bool VerkehrssituationToHeadquarter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_data() const {
  return _internal_has_data();
}
inline void VerkehrssituationToHeadquarter::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Verkehrssituation& VerkehrssituationToHeadquarter::_internal_data() const {
  const ::Verkehrssituation* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Verkehrssituation*>(
      &::_Verkehrssituation_default_instance_);
}
inline const ::Verkehrssituation& VerkehrssituationToHeadquarter::data() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.data)
  return _internal_data();
}
inline void VerkehrssituationToHeadquarter::unsafe_arena_set_allocated_data(
    ::Verkehrssituation* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VerkehrssituationToHeadquarter.data)
}
inline ::Verkehrssituation* VerkehrssituationToHeadquarter::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::Verkehrssituation* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Verkehrssituation* VerkehrssituationToHeadquarter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToHeadquarter.data)
  _has_bits_[0] &= ~0x00000004u;
  ::Verkehrssituation* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Verkehrssituation* VerkehrssituationToHeadquarter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Verkehrssituation>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Verkehrssituation* VerkehrssituationToHeadquarter::mutable_data() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToHeadquarter.data)
  return _internal_mutable_data();
}
inline void VerkehrssituationToHeadquarter::set_allocated_data(::Verkehrssituation* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToHeadquarter.data)
}

// optional string from_address = 2;
inline bool VerkehrssituationToHeadquarter::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_from_address() const {
  return _internal_has_from_address();
}
inline void VerkehrssituationToHeadquarter::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerkehrssituationToHeadquarter::from_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.from_address)
  return _internal_from_address();
}
inline void VerkehrssituationToHeadquarter::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.from_address)
}
inline std::string* VerkehrssituationToHeadquarter::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToHeadquarter.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& VerkehrssituationToHeadquarter::_internal_from_address() const {
  return from_address_.Get();
}
inline void VerkehrssituationToHeadquarter::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationToHeadquarter::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationToHeadquarter.from_address)
}
inline void VerkehrssituationToHeadquarter::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationToHeadquarter.from_address)
}
inline void VerkehrssituationToHeadquarter::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationToHeadquarter.from_address)
}
inline std::string* VerkehrssituationToHeadquarter::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationToHeadquarter::release_from_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToHeadquarter.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationToHeadquarter::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToHeadquarter.from_address)
}

// optional int32 from_port = 3;
inline bool VerkehrssituationToHeadquarter::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_from_port() const {
  return _internal_has_from_port();
}
inline void VerkehrssituationToHeadquarter::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToHeadquarter::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToHeadquarter::from_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.from_port)
  return _internal_from_port();
}
inline void VerkehrssituationToHeadquarter::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void VerkehrssituationToHeadquarter::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.from_port)
}

// optional string to_address = 4;
inline bool VerkehrssituationToHeadquarter::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_to_address() const {
  return _internal_has_to_address();
}
inline void VerkehrssituationToHeadquarter::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerkehrssituationToHeadquarter::to_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.to_address)
  return _internal_to_address();
}
inline void VerkehrssituationToHeadquarter::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.to_address)
}
inline std::string* VerkehrssituationToHeadquarter::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToHeadquarter.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& VerkehrssituationToHeadquarter::_internal_to_address() const {
  return to_address_.Get();
}
inline void VerkehrssituationToHeadquarter::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationToHeadquarter::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationToHeadquarter.to_address)
}
inline void VerkehrssituationToHeadquarter::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationToHeadquarter.to_address)
}
inline void VerkehrssituationToHeadquarter::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationToHeadquarter.to_address)
}
inline std::string* VerkehrssituationToHeadquarter::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationToHeadquarter::release_to_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToHeadquarter.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationToHeadquarter::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToHeadquarter.to_address)
}

// optional int32 to_port = 5;
inline bool VerkehrssituationToHeadquarter::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_to_port() const {
  return _internal_has_to_port();
}
inline void VerkehrssituationToHeadquarter::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToHeadquarter::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToHeadquarter::to_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.to_port)
  return _internal_to_port();
}
inline void VerkehrssituationToHeadquarter::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void VerkehrssituationToHeadquarter::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.to_port)
}

// required uint64 send = 6;
inline bool VerkehrssituationToHeadquarter::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_send() const {
  return _internal_has_send();
}
inline void VerkehrssituationToHeadquarter::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::send() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.send)
  return _internal_send();
}
inline void VerkehrssituationToHeadquarter::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void VerkehrssituationToHeadquarter::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.send)
}

// optional uint64 received = 7;
inline bool VerkehrssituationToHeadquarter::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_received() const {
  return _internal_has_received();
}
inline void VerkehrssituationToHeadquarter::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::received() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.received)
  return _internal_received();
}
inline void VerkehrssituationToHeadquarter::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void VerkehrssituationToHeadquarter::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.received)
}

// optional uint64 latency = 8;
inline bool VerkehrssituationToHeadquarter::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_latency() const {
  return _internal_has_latency();
}
inline void VerkehrssituationToHeadquarter::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::latency() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.latency)
  return _internal_latency();
}
inline void VerkehrssituationToHeadquarter::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void VerkehrssituationToHeadquarter::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.latency)
}

// optional uint64 round_trip = 9;
inline bool VerkehrssituationToHeadquarter::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VerkehrssituationToHeadquarter::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void VerkehrssituationToHeadquarter::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToHeadquarter::round_trip() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToHeadquarter.round_trip)
  return _internal_round_trip();
}
inline void VerkehrssituationToHeadquarter::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void VerkehrssituationToHeadquarter::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToHeadquarter.round_trip)
}

// -------------------------------------------------------------------

// VerkehrssituationToServer

// required .VerkehrssituationToHeadquarter data = 1;
inline bool VerkehrssituationToServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool VerkehrssituationToServer::has_data() const {
  return _internal_has_data();
}
inline void VerkehrssituationToServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::VerkehrssituationToHeadquarter& VerkehrssituationToServer::_internal_data() const {
  const ::VerkehrssituationToHeadquarter* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VerkehrssituationToHeadquarter*>(
      &::_VerkehrssituationToHeadquarter_default_instance_);
}
inline const ::VerkehrssituationToHeadquarter& VerkehrssituationToServer::data() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.data)
  return _internal_data();
}
inline void VerkehrssituationToServer::unsafe_arena_set_allocated_data(
    ::VerkehrssituationToHeadquarter* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VerkehrssituationToServer.data)
}
inline ::VerkehrssituationToHeadquarter* VerkehrssituationToServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::VerkehrssituationToHeadquarter* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VerkehrssituationToHeadquarter* VerkehrssituationToServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::VerkehrssituationToHeadquarter* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::VerkehrssituationToHeadquarter* VerkehrssituationToServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::VerkehrssituationToHeadquarter>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::VerkehrssituationToHeadquarter* VerkehrssituationToServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToServer.data)
  return _internal_mutable_data();
}
inline void VerkehrssituationToServer::set_allocated_data(::VerkehrssituationToHeadquarter* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToServer.data)
}

// optional string from_address = 2;
inline bool VerkehrssituationToServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void VerkehrssituationToServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerkehrssituationToServer::from_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.from_address)
  return _internal_from_address();
}
inline void VerkehrssituationToServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.from_address)
}
inline std::string* VerkehrssituationToServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& VerkehrssituationToServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void VerkehrssituationToServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationToServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationToServer.from_address)
}
inline void VerkehrssituationToServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationToServer.from_address)
}
inline void VerkehrssituationToServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationToServer.from_address)
}
inline std::string* VerkehrssituationToServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationToServer::release_from_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationToServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToServer.from_address)
}

// optional int32 from_port = 3;
inline bool VerkehrssituationToServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void VerkehrssituationToServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToServer::from_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.from_port)
  return _internal_from_port();
}
inline void VerkehrssituationToServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void VerkehrssituationToServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.from_port)
}

// optional string to_address = 4;
inline bool VerkehrssituationToServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void VerkehrssituationToServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerkehrssituationToServer::to_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.to_address)
  return _internal_to_address();
}
inline void VerkehrssituationToServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.to_address)
}
inline std::string* VerkehrssituationToServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationToServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& VerkehrssituationToServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void VerkehrssituationToServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationToServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationToServer.to_address)
}
inline void VerkehrssituationToServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationToServer.to_address)
}
inline void VerkehrssituationToServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationToServer.to_address)
}
inline std::string* VerkehrssituationToServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationToServer::release_to_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationToServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationToServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationToServer.to_address)
}

// optional int32 to_port = 5;
inline bool VerkehrssituationToServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void VerkehrssituationToServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationToServer::to_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.to_port)
  return _internal_to_port();
}
inline void VerkehrssituationToServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void VerkehrssituationToServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.to_port)
}

// required uint64 send = 6;
inline bool VerkehrssituationToServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_send() const {
  return _internal_has_send();
}
inline void VerkehrssituationToServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::send() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.send)
  return _internal_send();
}
inline void VerkehrssituationToServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void VerkehrssituationToServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.send)
}

// optional uint64 received = 7;
inline bool VerkehrssituationToServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_received() const {
  return _internal_has_received();
}
inline void VerkehrssituationToServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::received() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.received)
  return _internal_received();
}
inline void VerkehrssituationToServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void VerkehrssituationToServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.received)
}

// optional uint64 latency = 8;
inline bool VerkehrssituationToServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_latency() const {
  return _internal_has_latency();
}
inline void VerkehrssituationToServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::latency() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.latency)
  return _internal_latency();
}
inline void VerkehrssituationToServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void VerkehrssituationToServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.latency)
}

// optional uint64 round_trip = 9;
inline bool VerkehrssituationToServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VerkehrssituationToServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void VerkehrssituationToServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationToServer::round_trip() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationToServer.round_trip)
  return _internal_round_trip();
}
inline void VerkehrssituationToServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void VerkehrssituationToServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationToServer.round_trip)
}

// -------------------------------------------------------------------

// VerkehrssituationFromServer

// required .VerkehrssituationToServer data = 1;
inline bool VerkehrssituationFromServer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool VerkehrssituationFromServer::has_data() const {
  return _internal_has_data();
}
inline void VerkehrssituationFromServer::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::VerkehrssituationToServer& VerkehrssituationFromServer::_internal_data() const {
  const ::VerkehrssituationToServer* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VerkehrssituationToServer*>(
      &::_VerkehrssituationToServer_default_instance_);
}
inline const ::VerkehrssituationToServer& VerkehrssituationFromServer::data() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.data)
  return _internal_data();
}
inline void VerkehrssituationFromServer::unsafe_arena_set_allocated_data(
    ::VerkehrssituationToServer* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VerkehrssituationFromServer.data)
}
inline ::VerkehrssituationToServer* VerkehrssituationFromServer::release_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::VerkehrssituationToServer* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VerkehrssituationToServer* VerkehrssituationFromServer::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:VerkehrssituationFromServer.data)
  _has_bits_[0] &= ~0x00000004u;
  ::VerkehrssituationToServer* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::VerkehrssituationToServer* VerkehrssituationFromServer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::VerkehrssituationToServer>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::VerkehrssituationToServer* VerkehrssituationFromServer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationFromServer.data)
  return _internal_mutable_data();
}
inline void VerkehrssituationFromServer::set_allocated_data(::VerkehrssituationToServer* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationFromServer.data)
}

// optional string from_address = 2;
inline bool VerkehrssituationFromServer::_internal_has_from_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_from_address() const {
  return _internal_has_from_address();
}
inline void VerkehrssituationFromServer::clear_from_address() {
  from_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VerkehrssituationFromServer::from_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.from_address)
  return _internal_from_address();
}
inline void VerkehrssituationFromServer::set_from_address(const std::string& value) {
  _internal_set_from_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.from_address)
}
inline std::string* VerkehrssituationFromServer::mutable_from_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationFromServer.from_address)
  return _internal_mutable_from_address();
}
inline const std::string& VerkehrssituationFromServer::_internal_from_address() const {
  return from_address_.Get();
}
inline void VerkehrssituationFromServer::_internal_set_from_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationFromServer::set_from_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationFromServer.from_address)
}
inline void VerkehrssituationFromServer::set_from_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationFromServer.from_address)
}
inline void VerkehrssituationFromServer::set_from_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationFromServer.from_address)
}
inline std::string* VerkehrssituationFromServer::_internal_mutable_from_address() {
  _has_bits_[0] |= 0x00000001u;
  return from_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationFromServer::release_from_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationFromServer.from_address)
  if (!_internal_has_from_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationFromServer::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationFromServer.from_address)
}

// optional int32 from_port = 3;
inline bool VerkehrssituationFromServer::_internal_has_from_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_from_port() const {
  return _internal_has_from_port();
}
inline void VerkehrssituationFromServer::clear_from_port() {
  from_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationFromServer::_internal_from_port() const {
  return from_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationFromServer::from_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.from_port)
  return _internal_from_port();
}
inline void VerkehrssituationFromServer::_internal_set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  from_port_ = value;
}
inline void VerkehrssituationFromServer::set_from_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.from_port)
}

// optional string to_address = 4;
inline bool VerkehrssituationFromServer::_internal_has_to_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_to_address() const {
  return _internal_has_to_address();
}
inline void VerkehrssituationFromServer::clear_to_address() {
  to_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VerkehrssituationFromServer::to_address() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.to_address)
  return _internal_to_address();
}
inline void VerkehrssituationFromServer::set_to_address(const std::string& value) {
  _internal_set_to_address(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.to_address)
}
inline std::string* VerkehrssituationFromServer::mutable_to_address() {
  // @@protoc_insertion_point(field_mutable:VerkehrssituationFromServer.to_address)
  return _internal_mutable_to_address();
}
inline const std::string& VerkehrssituationFromServer::_internal_to_address() const {
  return to_address_.Get();
}
inline void VerkehrssituationFromServer::_internal_set_to_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerkehrssituationFromServer::set_to_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerkehrssituationFromServer.to_address)
}
inline void VerkehrssituationFromServer::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:VerkehrssituationFromServer.to_address)
}
inline void VerkehrssituationFromServer::set_to_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerkehrssituationFromServer.to_address)
}
inline std::string* VerkehrssituationFromServer::_internal_mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  return to_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerkehrssituationFromServer::release_to_address() {
  // @@protoc_insertion_point(field_release:VerkehrssituationFromServer.to_address)
  if (!_internal_has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerkehrssituationFromServer::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerkehrssituationFromServer.to_address)
}

// optional int32 to_port = 5;
inline bool VerkehrssituationFromServer::_internal_has_to_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_to_port() const {
  return _internal_has_to_port();
}
inline void VerkehrssituationFromServer::clear_to_port() {
  to_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationFromServer::_internal_to_port() const {
  return to_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerkehrssituationFromServer::to_port() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.to_port)
  return _internal_to_port();
}
inline void VerkehrssituationFromServer::_internal_set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  to_port_ = value;
}
inline void VerkehrssituationFromServer::set_to_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_port(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.to_port)
}

// required uint64 send = 6;
inline bool VerkehrssituationFromServer::_internal_has_send() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_send() const {
  return _internal_has_send();
}
inline void VerkehrssituationFromServer::clear_send() {
  send_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::_internal_send() const {
  return send_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::send() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.send)
  return _internal_send();
}
inline void VerkehrssituationFromServer::_internal_set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  send_ = value;
}
inline void VerkehrssituationFromServer::set_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.send)
}

// optional uint64 received = 7;
inline bool VerkehrssituationFromServer::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_received() const {
  return _internal_has_received();
}
inline void VerkehrssituationFromServer::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::received() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.received)
  return _internal_received();
}
inline void VerkehrssituationFromServer::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  received_ = value;
}
inline void VerkehrssituationFromServer::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.received)
}

// optional uint64 latency = 8;
inline bool VerkehrssituationFromServer::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_latency() const {
  return _internal_has_latency();
}
inline void VerkehrssituationFromServer::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::latency() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.latency)
  return _internal_latency();
}
inline void VerkehrssituationFromServer::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  latency_ = value;
}
inline void VerkehrssituationFromServer::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.latency)
}

// optional uint64 round_trip = 9;
inline bool VerkehrssituationFromServer::_internal_has_round_trip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VerkehrssituationFromServer::has_round_trip() const {
  return _internal_has_round_trip();
}
inline void VerkehrssituationFromServer::clear_round_trip() {
  round_trip_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::_internal_round_trip() const {
  return round_trip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerkehrssituationFromServer::round_trip() const {
  // @@protoc_insertion_point(field_get:VerkehrssituationFromServer.round_trip)
  return _internal_round_trip();
}
inline void VerkehrssituationFromServer::_internal_set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  round_trip_ = value;
}
inline void VerkehrssituationFromServer::set_round_trip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_round_trip(value);
  // @@protoc_insertion_point(field_set:VerkehrssituationFromServer.round_trip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
